#!/usr/bin/env node
import 'source-map-support/register.js';
import * as cdk from 'aws-cdk-lib';
import { AuthInfraStack } from '../lib/auth-infra-stack';
import { LdapStack } from '../lib/ldap-stack';
import { generateAuthInfraStackName, generateLdapStackName, FIXED_STACK_CONFIG } from '../lib/stack-naming';
const app = new cdk.App();
// Read project tag with cascading priority (following base-infra pattern)
const projectTag = process.env.PROJECT ||
    app.node.tryGetContext('project') ||
    FIXED_STACK_CONFIG.PROJECT;
const stackName = app.node.tryGetContext('stackName') ||
    process.env.STACK_NAME ||
    'MyFirstStack';
const envType = app.node.tryGetContext('envType') ||
    process.env.ENV_TYPE ||
    (stackName === 'prod' ? 'prod' : 'dev-test');
// Generate consistent stack names using the naming utility
const authStackName = generateAuthInfraStackName(stackName);
const ldapStackName = generateLdapStackName(stackName);
// Tag every resource in the stack with the project name (following base-infra pattern)
cdk.Tags.of(app).add("Project", projectTag);
// Deploy main auth infrastructure stack
const authStack = new AuthInfraStack(app, authStackName, {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION,
    },
    stackName,
    envType: envType,
    description: 'TAK Authentication Layer - Authentik',
});
// Deploy LDAP outpost stack (depends on auth stack)
const ldapStack = new LdapStack(app, ldapStackName, {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION,
    },
    stackName,
    envType: envType,
    description: 'TAK Authentication Layer - LDAP Outpost',
});
// Add dependency to ensure auth stack deploys before LDAP stack
ldapStack.addDependency(authStack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2RrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sS0FBSyxHQUFHLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUNMLDBCQUEwQixFQUMxQixxQkFBcUIsRUFDckIsa0JBQWtCLEVBQ25CLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsMEVBQTBFO0FBQzFFLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTztJQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDakMsa0JBQWtCLENBQUMsT0FBTyxDQUFDO0FBRTlDLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVU7SUFDdEIsY0FBYyxDQUFDO0FBRWxDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQztJQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVE7SUFDcEIsQ0FBQyxTQUFTLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTVELDJEQUEyRDtBQUMzRCxNQUFNLGFBQWEsR0FBRywwQkFBMEIsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM1RCxNQUFNLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUV2RCx1RkFBdUY7QUFDdkYsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUU1Qyx3Q0FBd0M7QUFDeEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRTtJQUN2RCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUI7UUFDeEMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCO0tBQ3ZDO0lBQ0QsU0FBUztJQUNULE9BQU8sRUFBRSxPQUE4QjtJQUN2QyxXQUFXLEVBQUUsc0NBQXNDO0NBQ3BELENBQUMsQ0FBQztBQUVILG9EQUFvRDtBQUNwRCxNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFO0lBQ2xELEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtRQUN4QyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0I7S0FDdkM7SUFDRCxTQUFTO0lBQ1QsT0FBTyxFQUFFLE9BQThCO0lBQ3ZDLFdBQVcsRUFBRSx5Q0FBeUM7Q0FDdkQsQ0FBQyxDQUFDO0FBRUgsZ0VBQWdFO0FBQ2hFLFNBQVMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlci5qcyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQXV0aEluZnJhU3RhY2sgfSBmcm9tICcuLi9saWIvYXV0aC1pbmZyYS1zdGFjayc7XG5pbXBvcnQgeyBMZGFwU3RhY2sgfSBmcm9tICcuLi9saWIvbGRhcC1zdGFjayc7XG5pbXBvcnQgeyBcbiAgZ2VuZXJhdGVBdXRoSW5mcmFTdGFja05hbWUsXG4gIGdlbmVyYXRlTGRhcFN0YWNrTmFtZSxcbiAgRklYRURfU1RBQ0tfQ09ORklHXG59IGZyb20gJy4uL2xpYi9zdGFjay1uYW1pbmcnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG4vLyBSZWFkIHByb2plY3QgdGFnIHdpdGggY2FzY2FkaW5nIHByaW9yaXR5IChmb2xsb3dpbmcgYmFzZS1pbmZyYSBwYXR0ZXJuKVxuY29uc3QgcHJvamVjdFRhZyA9IHByb2Nlc3MuZW52LlBST0pFQ1QgfHwgXG4gICAgICAgICAgICAgICAgICAgYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgncHJvamVjdCcpIHx8IFxuICAgICAgICAgICAgICAgICAgIEZJWEVEX1NUQUNLX0NPTkZJRy5QUk9KRUNUO1xuXG5jb25zdCBzdGFja05hbWUgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdzdGFja05hbWUnKSB8fCBcbiAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5TVEFDS19OQU1FIHx8IFxuICAgICAgICAgICAgICAgICAgICdNeUZpcnN0U3RhY2snO1xuXG5jb25zdCBlbnZUeXBlID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZW52VHlwZScpIHx8IFxuICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuRU5WX1RZUEUgfHwgXG4gICAgICAgICAgICAgICAoc3RhY2tOYW1lID09PSAncHJvZCcgPyAncHJvZCcgOiAnZGV2LXRlc3QnKTtcblxuLy8gR2VuZXJhdGUgY29uc2lzdGVudCBzdGFjayBuYW1lcyB1c2luZyB0aGUgbmFtaW5nIHV0aWxpdHlcbmNvbnN0IGF1dGhTdGFja05hbWUgPSBnZW5lcmF0ZUF1dGhJbmZyYVN0YWNrTmFtZShzdGFja05hbWUpO1xuY29uc3QgbGRhcFN0YWNrTmFtZSA9IGdlbmVyYXRlTGRhcFN0YWNrTmFtZShzdGFja05hbWUpO1xuXG4vLyBUYWcgZXZlcnkgcmVzb3VyY2UgaW4gdGhlIHN0YWNrIHdpdGggdGhlIHByb2plY3QgbmFtZSAoZm9sbG93aW5nIGJhc2UtaW5mcmEgcGF0dGVybilcbmNkay5UYWdzLm9mKGFwcCkuYWRkKFwiUHJvamVjdFwiLCBwcm9qZWN0VGFnKTtcblxuLy8gRGVwbG95IG1haW4gYXV0aCBpbmZyYXN0cnVjdHVyZSBzdGFja1xuY29uc3QgYXV0aFN0YWNrID0gbmV3IEF1dGhJbmZyYVN0YWNrKGFwcCwgYXV0aFN0YWNrTmFtZSwge1xuICBlbnY6IHtcbiAgICBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULFxuICAgIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OLFxuICB9LFxuICBzdGFja05hbWUsXG4gIGVudlR5cGU6IGVudlR5cGUgYXMgJ3Byb2QnIHwgJ2Rldi10ZXN0JyxcbiAgZGVzY3JpcHRpb246ICdUQUsgQXV0aGVudGljYXRpb24gTGF5ZXIgLSBBdXRoZW50aWsnLFxufSk7XG5cbi8vIERlcGxveSBMREFQIG91dHBvc3Qgc3RhY2sgKGRlcGVuZHMgb24gYXV0aCBzdGFjaylcbmNvbnN0IGxkYXBTdGFjayA9IG5ldyBMZGFwU3RhY2soYXBwLCBsZGFwU3RhY2tOYW1lLCB7XG4gIGVudjoge1xuICAgIGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsXG4gICAgcmVnaW9uOiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT04sXG4gIH0sXG4gIHN0YWNrTmFtZSxcbiAgZW52VHlwZTogZW52VHlwZSBhcyAncHJvZCcgfCAnZGV2LXRlc3QnLFxuICBkZXNjcmlwdGlvbjogJ1RBSyBBdXRoZW50aWNhdGlvbiBMYXllciAtIExEQVAgT3V0cG9zdCcsXG59KTtcblxuLy8gQWRkIGRlcGVuZGVuY3kgdG8gZW5zdXJlIGF1dGggc3RhY2sgZGVwbG95cyBiZWZvcmUgTERBUCBzdGFja1xubGRhcFN0YWNrLmFkZERlcGVuZGVuY3koYXV0aFN0YWNrKTtcbiJdfQ==