name: Build and Push Docker Images - Demo

on:
  push:
    branches: [main]
    paths:
      - 'docker/**'
      - 'cdk.json'
  workflow_call:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if version unchanged'
        required: false
        default: false
        type: boolean
    outputs:
      authentik-tag:
        description: 'Authentik image tag'
        value: ${{ jobs.build-images.outputs.authentik-tag }}
      ldap-tag:
        description: 'LDAP image tag'
        value: ${{ jobs.build-images.outputs.ldap-tag }}
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if version unchanged'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  build-images:
    runs-on: ubuntu-latest
    environment: demo
    outputs:
      authentik-tag: ${{ steps.tags.outputs.authentik-tag }}
      ldap-tag: ${{ steps.tags.outputs.ldap-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup CDK Environment
        uses: ./.github/actions/setup-cdk
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-DockerBuild
      
      - name: Get ECR Repository and Build Tags
        id: tags
        run: |
          # Get ECR repository ARN from BaseInfra exports
          ECR_REPO_ARN=$(aws cloudformation describe-stacks \
            --stack-name TAK-${{ vars.STACK_NAME }}-BaseInfra \
            --query 'Stacks[0].Outputs[?OutputKey==`EcrArtifactsRepoArnOutput`].OutputValue' \
            --output text)
          
          if [[ -z "$ECR_REPO_ARN" ]]; then
            echo "ERROR: ECR repository ARN not found in BaseInfra stack outputs"
            exit 1
          fi
          
          # Extract repository name from ARN and build URI
          ECR_REPO_NAME=$(echo $ECR_REPO_ARN | cut -d'/' -f2)
          ECR_REPO_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${ECR_REPO_NAME}"
          
          VERSION=$(jq -r '.context."dev-test".authentik.authentikVersion' cdk.json)
          BRANDING=$(jq -r '.context."dev-test".authentik.branding' cdk.json)
          REVISION=$(jq -r '.context."dev-test".authentik.buildRevision' cdk.json)
          
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            AUTHENTIK_TAG="authentik-${VERSION}-${BRANDING}-r${REVISION}-${TIMESTAMP}"
            LDAP_TAG="ldap-${VERSION}-r${REVISION}-${TIMESTAMP}"
          else
            AUTHENTIK_TAG="authentik-${VERSION}-${BRANDING}-r${REVISION}"
            LDAP_TAG="ldap-${VERSION}-r${REVISION}"
          fi
          
          echo "ecr-repo-uri=$ECR_REPO_URI" >> $GITHUB_OUTPUT
          echo "authentik-tag=$AUTHENTIK_TAG" >> $GITHUB_OUTPUT
          echo "ldap-tag=$LDAP_TAG" >> $GITHUB_OUTPUT
          echo "Using ECR repository: $ECR_REPO_URI"
          echo "Building images with tags:"
          echo "  Authentik: $AUTHENTIK_TAG"
          echo "  LDAP: $LDAP_TAG"
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin \
            ${{ steps.tags.outputs.ecr-repo-uri }}
      
      - name: Build and Push Authentik Image
        run: |
          # Check if image already exists
          if aws ecr describe-images --repository-name $(echo ${{ steps.tags.outputs.ecr-repo-uri }} | cut -d'/' -f2) --image-ids imageTag=${{ steps.tags.outputs.authentik-tag }} >/dev/null 2>&1; then
            echo "âœ… Authentik image ${{ steps.tags.outputs.authentik-tag }} already exists, skipping build"
          else
            echo "ðŸ”¨ Building Authentik image ${{ steps.tags.outputs.authentik-tag }}"
            VERSION=$(jq -r '.context."dev-test".authentik.authentikVersion' cdk.json)
            BRANDING=$(jq -r '.context."dev-test".authentik.branding' cdk.json)
            
            docker build \
              -f docker/authentik-server/Dockerfile.${BRANDING} \
              --build-arg AUTHENTIK_VERSION=${VERSION} \
              -t ${{ steps.tags.outputs.ecr-repo-uri }}:${{ steps.tags.outputs.authentik-tag }} \
              .
            
            docker push ${{ steps.tags.outputs.ecr-repo-uri }}:${{ steps.tags.outputs.authentik-tag }}
            echo "âœ… Authentik image pushed successfully"
          fi
      
      - name: Build and Push LDAP Image
        run: |
          # Check if image already exists
          if aws ecr describe-images --repository-name $(echo ${{ steps.tags.outputs.ecr-repo-uri }} | cut -d'/' -f2) --image-ids imageTag=${{ steps.tags.outputs.ldap-tag }} >/dev/null 2>&1; then
            echo "âœ… LDAP image ${{ steps.tags.outputs.ldap-tag }} already exists, skipping build"
          else
            echo "ðŸ”¨ Building LDAP image ${{ steps.tags.outputs.ldap-tag }}"
            VERSION=$(jq -r '.context."dev-test".authentik.authentikVersion' cdk.json)
            
            docker build \
              -f docker/authentik-ldap/Dockerfile \
              --build-arg AUTHENTIK_VERSION=${VERSION} \
              -t ${{ steps.tags.outputs.ecr-repo-uri }}:${{ steps.tags.outputs.ldap-tag }} \
              docker/authentik-ldap/
            
            docker push ${{ steps.tags.outputs.ecr-repo-uri }}:${{ steps.tags.outputs.ldap-tag }}
            echo "âœ… LDAP image pushed successfully"
          fi
      
      - name: Output Image Information
        run: |
          echo "âœ… Successfully built and pushed Docker images:"
          echo "ðŸ“¦ Authentik: ${{ steps.tags.outputs.authentik-tag }}"
          echo "ðŸ“¦ LDAP: ${{ steps.tags.outputs.ldap-tag }}"
          echo ""
          echo "ðŸš€ To deploy with these images, use:"
          echo "npm run cdk deploy -- \\"
          echo "  --context usePreBuiltImages=true \\"
          echo "  --context authentikImageTag=${{ steps.tags.outputs.authentik-tag }} \\"
          echo "  --context ldapImageTag=${{ steps.tags.outputs.ldap-tag }}"