"use strict";
/**
 * Dynamic context override utilities
 * Simplified flat parameter system for command-line context overrides
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyContextOverrides = applyContextOverrides;
function applyContextOverrides(app, baseConfig) {
    const topLevelOverrides = {
        stackName: app.node.tryGetContext('stackName'),
    };
    return {
        ...baseConfig,
        ...Object.fromEntries(Object.entries(topLevelOverrides).filter(([_, v]) => v !== undefined)),
        database: {
            ...baseConfig.database,
            instanceClass: app.node.tryGetContext('instanceClass') ?? baseConfig.database.instanceClass,
            instanceCount: app.node.tryGetContext('instanceCount') ?? baseConfig.database.instanceCount,
            allocatedStorage: app.node.tryGetContext('allocatedStorage') ?? baseConfig.database.allocatedStorage,
            maxAllocatedStorage: app.node.tryGetContext('maxAllocatedStorage') ?? baseConfig.database.maxAllocatedStorage,
            enablePerformanceInsights: app.node.tryGetContext('enablePerformanceInsights') ?? baseConfig.database.enablePerformanceInsights,
            monitoringInterval: app.node.tryGetContext('monitoringInterval') ?? baseConfig.database.monitoringInterval,
            backupRetentionDays: app.node.tryGetContext('backupRetentionDays') ?? baseConfig.database.backupRetentionDays,
            deleteProtection: app.node.tryGetContext('deleteProtection') ?? baseConfig.database.deleteProtection,
        },
        redis: {
            ...baseConfig.redis,
            nodeType: app.node.tryGetContext('nodeType') ?? baseConfig.redis.nodeType,
            numCacheNodes: app.node.tryGetContext('numCacheNodes') ?? baseConfig.redis.numCacheNodes,
            enableTransit: app.node.tryGetContext('enableTransit') ?? baseConfig.redis.enableTransit,
            enableAtRest: app.node.tryGetContext('enableAtRest') ?? baseConfig.redis.enableAtRest,
        },
        ecs: {
            ...baseConfig.ecs,
            taskCpu: app.node.tryGetContext('taskCpu') ?? baseConfig.ecs.taskCpu,
            taskMemory: app.node.tryGetContext('taskMemory') ?? baseConfig.ecs.taskMemory,
            desiredCount: app.node.tryGetContext('desiredCount') ?? baseConfig.ecs.desiredCount,
            enableDetailedLogging: app.node.tryGetContext('enableDetailedLogging') ?? baseConfig.ecs.enableDetailedLogging,
        },
        authentik: {
            ...baseConfig.authentik,
            hostname: app.node.tryGetContext('authentikHostname') ?? baseConfig.authentik.hostname,
            adminUserEmail: app.node.tryGetContext('adminUserEmail') ?? baseConfig.authentik.adminUserEmail,
            ldapHostname: app.node.tryGetContext('ldapHostname') ?? baseConfig.authentik.ldapHostname,
            ldapBaseDn: app.node.tryGetContext('ldapBaseDn') ?? baseConfig.authentik.ldapBaseDn,
        },
        general: {
            ...baseConfig.general,
            removalPolicy: app.node.tryGetContext('removalPolicy') || baseConfig.general.removalPolicy,
            enableDetailedLogging: app.node.tryGetContext('enableDetailedLogging') ?? baseConfig.general.enableDetailedLogging,
            enableContainerInsights: app.node.tryGetContext('enableContainerInsights') ?? baseConfig.general.enableContainerInsights,
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1vdmVycmlkZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb250ZXh0LW92ZXJyaWRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOztBQUtILHNEQWtEQztBQWxERCxTQUFnQixxQkFBcUIsQ0FDbkMsR0FBWSxFQUNaLFVBQW9DO0lBRXBDLE1BQU0saUJBQWlCLEdBQUc7UUFDeEIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztLQUMvQyxDQUFDO0lBRUYsT0FBTztRQUNMLEdBQUcsVUFBVTtRQUNiLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQztRQUM1RixRQUFRLEVBQUU7WUFDUixHQUFHLFVBQVUsQ0FBQyxRQUFRO1lBQ3RCLGFBQWEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWE7WUFDM0YsYUFBYSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYTtZQUMzRixnQkFBZ0IsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCO1lBQ3BHLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUI7WUFDN0cseUJBQXlCLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsMkJBQTJCLENB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dUJBQXVCO1NBQ3pIO0tBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIER5bmFtaWMgY29udGV4dCBvdmVycmlkZSB1dGlsaXRpZXNcbiAqIFNpbXBsaWZpZWQgZmxhdCBwYXJhbWV0ZXIgc3lzdGVtIGZvciBjb21tYW5kLWxpbmUgY29udGV4dCBvdmVycmlkZXNcbiAqL1xuXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29udGV4dEVudmlyb25tZW50Q29uZmlnIH0gZnJvbSAnLi4vc3RhY2stY29uZmlnJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5Q29udGV4dE92ZXJyaWRlcyhcbiAgYXBwOiBjZGsuQXBwLCBcbiAgYmFzZUNvbmZpZzogQ29udGV4dEVudmlyb25tZW50Q29uZmlnXG4pOiBDb250ZXh0RW52aXJvbm1lbnRDb25maWcge1xuICBjb25zdCB0b3BMZXZlbE92ZXJyaWRlcyA9IHtcbiAgICBzdGFja05hbWU6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ3N0YWNrTmFtZScpLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgLi4uYmFzZUNvbmZpZyxcbiAgICAuLi5PYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXModG9wTGV2ZWxPdmVycmlkZXMpLmZpbHRlcigoW18sIHZdKSA9PiB2ICE9PSB1bmRlZmluZWQpKSxcbiAgICBkYXRhYmFzZToge1xuICAgICAgLi4uYmFzZUNvbmZpZy5kYXRhYmFzZSxcbiAgICAgIGluc3RhbmNlQ2xhc3M6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2luc3RhbmNlQ2xhc3MnKSA/PyBiYXNlQ29uZmlnLmRhdGFiYXNlLmluc3RhbmNlQ2xhc3MsXG4gICAgICBpbnN0YW5jZUNvdW50OiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdpbnN0YW5jZUNvdW50JykgPz8gYmFzZUNvbmZpZy5kYXRhYmFzZS5pbnN0YW5jZUNvdW50LFxuICAgICAgYWxsb2NhdGVkU3RvcmFnZTogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnYWxsb2NhdGVkU3RvcmFnZScpID8/IGJhc2VDb25maWcuZGF0YWJhc2UuYWxsb2NhdGVkU3RvcmFnZSxcbiAgICAgIG1heEFsbG9jYXRlZFN0b3JhZ2U6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ21heEFsbG9jYXRlZFN0b3JhZ2UnKSA/PyBiYXNlQ29uZmlnLmRhdGFiYXNlLm1heEFsbG9jYXRlZFN0b3JhZ2UsXG4gICAgICBlbmFibGVQZXJmb3JtYW5jZUluc2lnaHRzOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdlbmFibGVQZXJmb3JtYW5jZUluc2lnaHRzJykgPz8gYmFzZUNvbmZpZy5kYXRhYmFzZS5lbmFibGVQZXJmb3JtYW5jZUluc2lnaHRzLFxuICAgICAgbW9uaXRvcmluZ0ludGVydmFsOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdtb25pdG9yaW5nSW50ZXJ2YWwnKSA/PyBiYXNlQ29uZmlnLmRhdGFiYXNlLm1vbml0b3JpbmdJbnRlcnZhbCxcbiAgICAgIGJhY2t1cFJldGVudGlvbkRheXM6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2JhY2t1cFJldGVudGlvbkRheXMnKSA/PyBiYXNlQ29uZmlnLmRhdGFiYXNlLmJhY2t1cFJldGVudGlvbkRheXMsXG4gICAgICBkZWxldGVQcm90ZWN0aW9uOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdkZWxldGVQcm90ZWN0aW9uJykgPz8gYmFzZUNvbmZpZy5kYXRhYmFzZS5kZWxldGVQcm90ZWN0aW9uLFxuICAgIH0sXG4gICAgcmVkaXM6IHtcbiAgICAgIC4uLmJhc2VDb25maWcucmVkaXMsXG4gICAgICBub2RlVHlwZTogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnbm9kZVR5cGUnKSA/PyBiYXNlQ29uZmlnLnJlZGlzLm5vZGVUeXBlLFxuICAgICAgbnVtQ2FjaGVOb2RlczogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnbnVtQ2FjaGVOb2RlcycpID8/IGJhc2VDb25maWcucmVkaXMubnVtQ2FjaGVOb2RlcyxcbiAgICAgIGVuYWJsZVRyYW5zaXQ6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2VuYWJsZVRyYW5zaXQnKSA/PyBiYXNlQ29uZmlnLnJlZGlzLmVuYWJsZVRyYW5zaXQsXG4gICAgICBlbmFibGVBdFJlc3Q6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2VuYWJsZUF0UmVzdCcpID8/IGJhc2VDb25maWcucmVkaXMuZW5hYmxlQXRSZXN0LFxuICAgIH0sXG4gICAgZWNzOiB7XG4gICAgICAuLi5iYXNlQ29uZmlnLmVjcyxcbiAgICAgIHRhc2tDcHU6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ3Rhc2tDcHUnKSA/PyBiYXNlQ29uZmlnLmVjcy50YXNrQ3B1LFxuICAgICAgdGFza01lbW9yeTogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgndGFza01lbW9yeScpID8/IGJhc2VDb25maWcuZWNzLnRhc2tNZW1vcnksXG4gICAgICBkZXNpcmVkQ291bnQ6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2Rlc2lyZWRDb3VudCcpID8/IGJhc2VDb25maWcuZWNzLmRlc2lyZWRDb3VudCxcbiAgICAgIGVuYWJsZURldGFpbGVkTG9nZ2luZzogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZW5hYmxlRGV0YWlsZWRMb2dnaW5nJykgPz8gYmFzZUNvbmZpZy5lY3MuZW5hYmxlRGV0YWlsZWRMb2dnaW5nLFxuICAgIH0sXG4gICAgYXV0aGVudGlrOiB7XG4gICAgICAuLi5iYXNlQ29uZmlnLmF1dGhlbnRpayxcbiAgICAgIGhvc3RuYW1lOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdhdXRoZW50aWtIb3N0bmFtZScpID8/IGJhc2VDb25maWcuYXV0aGVudGlrLmhvc3RuYW1lLFxuICAgICAgYWRtaW5Vc2VyRW1haWw6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2FkbWluVXNlckVtYWlsJykgPz8gYmFzZUNvbmZpZy5hdXRoZW50aWsuYWRtaW5Vc2VyRW1haWwsXG4gICAgICBsZGFwSG9zdG5hbWU6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2xkYXBIb3N0bmFtZScpID8/IGJhc2VDb25maWcuYXV0aGVudGlrLmxkYXBIb3N0bmFtZSxcbiAgICAgIGxkYXBCYXNlRG46IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2xkYXBCYXNlRG4nKSA/PyBiYXNlQ29uZmlnLmF1dGhlbnRpay5sZGFwQmFzZURuLFxuICAgIH0sXG4gICAgZ2VuZXJhbDoge1xuICAgICAgLi4uYmFzZUNvbmZpZy5nZW5lcmFsLFxuICAgICAgcmVtb3ZhbFBvbGljeTogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgncmVtb3ZhbFBvbGljeScpIHx8IGJhc2VDb25maWcuZ2VuZXJhbC5yZW1vdmFsUG9saWN5LFxuICAgICAgZW5hYmxlRGV0YWlsZWRMb2dnaW5nOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdlbmFibGVEZXRhaWxlZExvZ2dpbmcnKSA/PyBiYXNlQ29uZmlnLmdlbmVyYWwuZW5hYmxlRGV0YWlsZWRMb2dnaW5nLFxuICAgICAgZW5hYmxlQ29udGFpbmVySW5zaWdodHM6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2VuYWJsZUNvbnRhaW5lckluc2lnaHRzJykgPz8gYmFzZUNvbmZpZy5nZW5lcmFsLmVuYWJsZUNvbnRhaW5lckluc2lnaHRzLFxuICAgIH0sXG4gIH07XG59XG4iXX0=