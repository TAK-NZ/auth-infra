"use strict";
/**
 * Constants and configuration definitions
 * Centralizes magic values and reusable configurations for the TAK-NZ auth infrastructure
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SECRET_NAMES = exports.TAG_CONSTANTS = exports.SERVICE_CONSTANTS = exports.NETWORK_PORTS = exports.MAX_AZS = exports.DEFAULT_VPC_CIDR = exports.DEFAULT_AWS_REGION = exports.INFRASTRUCTURE_DEFAULTS = exports.AWS_REGIONS = void 0;
/**
 * AWS Region constants
 * Predefined regions commonly used in TAK-NZ deployments
 */
exports.AWS_REGIONS = {
    /** Asia Pacific (Sydney) - Primary region for TAK-NZ */
    AP_SOUTHEAST_2: 'ap-southeast-2',
    /** US East (N. Virginia) - Global services region */
    US_EAST_1: 'us-east-1',
};
/**
 * Infrastructure default configuration values
 * These can be overridden via CDK context
 */
exports.INFRASTRUCTURE_DEFAULTS = {
    /** Default AWS region for all deployments */
    DEFAULT_AWS_REGION: exports.AWS_REGIONS.AP_SOUTHEAST_2,
    /** Default VPC CIDR block - provides ~4000 IP addresses */
    DEFAULT_VPC_CIDR: '10.0.0.0/20',
    /** Maximum number of Availability Zones to use */
    MAX_AZS: 3,
};
/**
 * Export individual constants for convenience
 */
exports.DEFAULT_AWS_REGION = exports.INFRASTRUCTURE_DEFAULTS.DEFAULT_AWS_REGION, exports.DEFAULT_VPC_CIDR = exports.INFRASTRUCTURE_DEFAULTS.DEFAULT_VPC_CIDR, exports.MAX_AZS = exports.INFRASTRUCTURE_DEFAULTS.MAX_AZS;
/**
 * Network port constants for security group rules
 */
exports.NETWORK_PORTS = {
    /** HTTP port */
    HTTP: 80,
    /** HTTPS port */
    HTTPS: 443,
    /** PostgreSQL default port */
    POSTGRES: 5432,
    /** Redis default port */
    REDIS: 6379,
    /** LDAP port */
    LDAP: 389,
    /** LDAPS (LDAP over SSL) port */
    LDAPS: 636,
    /** Authentik default port */
    AUTHENTIK: 9000,
};
/**
 * Service-specific constants
 */
exports.SERVICE_CONSTANTS = {
    /** Authentik service configuration */
    AUTHENTIK: {
        /** Default container port */
        CONTAINER_PORT: exports.NETWORK_PORTS.AUTHENTIK,
        /** Health check path */
        HEALTH_CHECK_PATH: '/-/health/ready/',
        /** Default image repository */
        IMAGE_REPOSITORY: 'ghcr.io/goauthentik/server',
    },
    /** LDAP service configuration */
    LDAP: {
        /** Default LDAP port */
        PORT: exports.NETWORK_PORTS.LDAP,
        /** Default LDAPS port */
        SECURE_PORT: exports.NETWORK_PORTS.LDAPS,
        /** Default image repository */
        IMAGE_REPOSITORY: 'osixia/openldap',
    },
};
/**
 * Tag constants for resource tagging
 */
exports.TAG_CONSTANTS = {
    /** Project identifier */
    PROJECT: 'TAK',
    /** Component identifier for auth infrastructure */
    AUTH_COMPONENT: 'AuthInfra',
    /** Managed by identifier */
    MANAGED_BY: 'CDK',
};
/**
 * Secret name constants for AWS Secrets Manager
 * These are used as aliases/names for secrets, not actual secret values
 */
exports.SECRET_NAMES = {
    /** Authentik secret key alias */
    AUTHENTIK_SECRET_KEY: 'authentik-secret-key',
    /** Authentik PostgreSQL password alias */
    AUTHENTIK_POSTGRES_PASSWORD: 'authentik-postgres-password',
    /** Authentik Redis password alias */
    AUTHENTIK_REDIS_PASSWORD: 'authentik-redis-password',
    /** LDAP admin password alias */
    LDAP_ADMIN_PASSWORD: 'ldap-admin-password',
    /** LDAP config password alias */
    LDAP_CONFIG_PASSWORD: 'ldap-config-password',
    /** LDAP readonly user alias */
    LDAP_READONLY_USER: 'readonly',
    /** LDAP readonly password alias */
    LDAP_READONLY_PASSWORD: 'ldap-readonly-password',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQUVIOzs7R0FHRztBQUNVLFFBQUEsV0FBVyxHQUFHO0lBQ3pCLHdEQUF3RDtJQUN4RCxjQUFjLEVBQUUsZ0JBQXlCO0lBQ3pDLHFEQUFxRDtJQUNyRCxTQUFTLEVBQUUsV0FBb0I7Q0FDdkIsQ0FBQztBQUVYOzs7R0FHRztBQUNVLFFBQUEsdUJBQXVCLEdBQUc7SUFDckMsNkNBQTZDO0lBQzdDLGtCQUFrQixFQUFFLG1CQUFXLENBQUMsY0FBYztJQUM5QywyREFBMkQ7SUFDM0QsZ0JBQWdCLEVBQUUsYUFBc0I7SUFDeEMsa0RBQWtEO0lBQ2xELE9BQU8sRUFBRSxDQUFVO0NBQ1gsQ0FBQztBQUVYOztHQUVHO0FBQ1ksMEJBQWtCLEdBQWdDLCtCQUF1QixxQkFBckQsd0JBQWdCLEdBQWMsK0JBQXVCLG1CQUFuQyxlQUFPLEdBQUssK0JBQXVCLFNBQUM7QUFFekY7O0dBRUc7QUFDVSxRQUFBLGFBQWEsR0FBRztJQUMzQixnQkFBZ0I7SUFDaEIsSUFBSSxFQUFFLEVBQVc7SUFDakIsaUJBQWlCO0lBQ2pCLEtBQUssRUFBRSxHQUFZO0lBQ25CLDhCQUE4QjtJQUM5QixRQUFRLEVBQUUsSUFBYTtJQUN2Qix5QkFBeUI7SUFDekIsS0FBSyxFQUFFLElBQWE7SUFDcEIsZ0JBQWdCO0lBQ2hCLElBQUksRUFBRSxHQUFZO0lBQ2xCLGlDQUFpQztJQUNqQyxLQUFLLEVBQUUsR0FBWTtJQUNuQiw2QkFBNkI7SUFDN0IsU0FBUyxFQUFFLElBQWE7Q0FDaEIsQ0FBQztBQUVYOztHQUVHO0FBQ1UsUUFBQSxpQkFBaUIsR0FBRztJQUMvQixzQ0FBc0M7SUFDdEMsU0FBUyxFQUFFO1FBQ1QsNkJBQTZCO1FBQzdCLGNBQWMsRUFBRSxxQkFBYSxDQUFDLFNBQVM7UUFDdkMsd0JBQXdCO1FBQ3hCLGlCQUFpQixFQUFFLGtCQUFrQjtRQUNyQywrQkFBK0I7UUFDL0IsZ0JBQWdCLEVBQUUsNEJBQTRCO0tBQy9DO0lBQ0QsaUNBQWlDO0lBQ2pDLElBQUksRUFBRTtRQUNKLHdCQUF3QjtRQUN4QixJQUFJLEVBQUUscUJBQWEsQ0FBQyxJQUFJO1FBQ3hCLHlCQUF5QjtRQUN6QixXQUFXLEVBQUUscUJBQWEsQ0FBQyxLQUFLO1FBQ2hDLCtCQUErQjtRQUMvQixnQkFBZ0IsRUFBRSxpQkFBaUI7S0FDcEM7Q0FDTyxDQUFDO0FBRVg7O0dBRUc7QUFDVSxRQUFBLGFBQWEsR0FBRztJQUMzQix5QkFBeUI7SUFDekIsT0FBTyxFQUFFLEtBQWM7SUFDdkIsbURBQW1EO0lBQ25ELGNBQWMsRUFBRSxXQUFvQjtJQUNwQyw0QkFBNEI7SUFDNUIsVUFBVSxFQUFFLEtBQWM7Q0FDbEIsQ0FBQztBQUVYOzs7R0FHRztBQUNVLFFBQUEsWUFBWSxHQUFHO0lBQzFCLGlDQUFpQztJQUNqQyxvQkFBb0IsRUFBRSxzQkFBK0I7SUFDckQsMENBQTBDO0lBQzFDLDJCQUEyQixFQUFFLDZCQUFzQztJQUNuRSxxQ0FBcUM7SUFDckMsd0JBQXdCLEVBQUUsMEJBQW1DO0lBQzdELGdDQUFnQztJQUNoQyxtQkFBbUIsRUFBRSxxQkFBOEI7SUFDbkQsaUNBQWlDO0lBQ2pDLG9CQUFvQixFQUFFLHNCQUErQjtJQUNyRCwrQkFBK0I7SUFDL0Isa0JBQWtCLEVBQUUsVUFBbUI7SUFDdkMsbUNBQW1DO0lBQ25DLHNCQUFzQixFQUFFLHdCQUFpQztDQUNqRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25zdGFudHMgYW5kIGNvbmZpZ3VyYXRpb24gZGVmaW5pdGlvbnNcbiAqIENlbnRyYWxpemVzIG1hZ2ljIHZhbHVlcyBhbmQgcmV1c2FibGUgY29uZmlndXJhdGlvbnMgZm9yIHRoZSBUQUstTlogYXV0aCBpbmZyYXN0cnVjdHVyZVxuICovXG5cbi8qKlxuICogQVdTIFJlZ2lvbiBjb25zdGFudHNcbiAqIFByZWRlZmluZWQgcmVnaW9ucyBjb21tb25seSB1c2VkIGluIFRBSy1OWiBkZXBsb3ltZW50c1xuICovXG5leHBvcnQgY29uc3QgQVdTX1JFR0lPTlMgPSB7XG4gIC8qKiBBc2lhIFBhY2lmaWMgKFN5ZG5leSkgLSBQcmltYXJ5IHJlZ2lvbiBmb3IgVEFLLU5aICovXG4gIEFQX1NPVVRIRUFTVF8yOiAnYXAtc291dGhlYXN0LTInIGFzIGNvbnN0LFxuICAvKiogVVMgRWFzdCAoTi4gVmlyZ2luaWEpIC0gR2xvYmFsIHNlcnZpY2VzIHJlZ2lvbiAqL1xuICBVU19FQVNUXzE6ICd1cy1lYXN0LTEnIGFzIGNvbnN0LFxufSBhcyBjb25zdDtcblxuLyoqXG4gKiBJbmZyYXN0cnVjdHVyZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdmFsdWVzXG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGRlbiB2aWEgQ0RLIGNvbnRleHRcbiAqL1xuZXhwb3J0IGNvbnN0IElORlJBU1RSVUNUVVJFX0RFRkFVTFRTID0ge1xuICAvKiogRGVmYXVsdCBBV1MgcmVnaW9uIGZvciBhbGwgZGVwbG95bWVudHMgKi9cbiAgREVGQVVMVF9BV1NfUkVHSU9OOiBBV1NfUkVHSU9OUy5BUF9TT1VUSEVBU1RfMixcbiAgLyoqIERlZmF1bHQgVlBDIENJRFIgYmxvY2sgLSBwcm92aWRlcyB+NDAwMCBJUCBhZGRyZXNzZXMgKi9cbiAgREVGQVVMVF9WUENfQ0lEUjogJzEwLjAuMC4wLzIwJyBhcyBjb25zdCxcbiAgLyoqIE1heGltdW0gbnVtYmVyIG9mIEF2YWlsYWJpbGl0eSBab25lcyB0byB1c2UgKi9cbiAgTUFYX0FaUzogMyBhcyBjb25zdCxcbn0gYXMgY29uc3Q7XG5cbi8qKlxuICogRXhwb3J0IGluZGl2aWR1YWwgY29uc3RhbnRzIGZvciBjb252ZW5pZW5jZVxuICovXG5leHBvcnQgY29uc3QgeyBERUZBVUxUX0FXU19SRUdJT04sIERFRkFVTFRfVlBDX0NJRFIsIE1BWF9BWlMgfSA9IElORlJBU1RSVUNUVVJFX0RFRkFVTFRTO1xuXG4vKipcbiAqIE5ldHdvcmsgcG9ydCBjb25zdGFudHMgZm9yIHNlY3VyaXR5IGdyb3VwIHJ1bGVzXG4gKi9cbmV4cG9ydCBjb25zdCBORVRXT1JLX1BPUlRTID0ge1xuICAvKiogSFRUUCBwb3J0ICovXG4gIEhUVFA6IDgwIGFzIGNvbnN0LFxuICAvKiogSFRUUFMgcG9ydCAqL1xuICBIVFRQUzogNDQzIGFzIGNvbnN0LFxuICAvKiogUG9zdGdyZVNRTCBkZWZhdWx0IHBvcnQgKi9cbiAgUE9TVEdSRVM6IDU0MzIgYXMgY29uc3QsXG4gIC8qKiBSZWRpcyBkZWZhdWx0IHBvcnQgKi9cbiAgUkVESVM6IDYzNzkgYXMgY29uc3QsXG4gIC8qKiBMREFQIHBvcnQgKi9cbiAgTERBUDogMzg5IGFzIGNvbnN0LFxuICAvKiogTERBUFMgKExEQVAgb3ZlciBTU0wpIHBvcnQgKi9cbiAgTERBUFM6IDYzNiBhcyBjb25zdCxcbiAgLyoqIEF1dGhlbnRpayBkZWZhdWx0IHBvcnQgKi9cbiAgQVVUSEVOVElLOiA5MDAwIGFzIGNvbnN0LFxufSBhcyBjb25zdDtcblxuLyoqXG4gKiBTZXJ2aWNlLXNwZWNpZmljIGNvbnN0YW50c1xuICovXG5leHBvcnQgY29uc3QgU0VSVklDRV9DT05TVEFOVFMgPSB7XG4gIC8qKiBBdXRoZW50aWsgc2VydmljZSBjb25maWd1cmF0aW9uICovXG4gIEFVVEhFTlRJSzoge1xuICAgIC8qKiBEZWZhdWx0IGNvbnRhaW5lciBwb3J0ICovXG4gICAgQ09OVEFJTkVSX1BPUlQ6IE5FVFdPUktfUE9SVFMuQVVUSEVOVElLLFxuICAgIC8qKiBIZWFsdGggY2hlY2sgcGF0aCAqL1xuICAgIEhFQUxUSF9DSEVDS19QQVRIOiAnLy0vaGVhbHRoL3JlYWR5LycsXG4gICAgLyoqIERlZmF1bHQgaW1hZ2UgcmVwb3NpdG9yeSAqL1xuICAgIElNQUdFX1JFUE9TSVRPUlk6ICdnaGNyLmlvL2dvYXV0aGVudGlrL3NlcnZlcicsXG4gIH0sXG4gIC8qKiBMREFQIHNlcnZpY2UgY29uZmlndXJhdGlvbiAqL1xuICBMREFQOiB7XG4gICAgLyoqIERlZmF1bHQgTERBUCBwb3J0ICovXG4gICAgUE9SVDogTkVUV09SS19QT1JUUy5MREFQLFxuICAgIC8qKiBEZWZhdWx0IExEQVBTIHBvcnQgKi9cbiAgICBTRUNVUkVfUE9SVDogTkVUV09SS19QT1JUUy5MREFQUyxcbiAgICAvKiogRGVmYXVsdCBpbWFnZSByZXBvc2l0b3J5ICovXG4gICAgSU1BR0VfUkVQT1NJVE9SWTogJ29zaXhpYS9vcGVubGRhcCcsXG4gIH0sXG59IGFzIGNvbnN0O1xuXG4vKipcbiAqIFRhZyBjb25zdGFudHMgZm9yIHJlc291cmNlIHRhZ2dpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IFRBR19DT05TVEFOVFMgPSB7XG4gIC8qKiBQcm9qZWN0IGlkZW50aWZpZXIgKi9cbiAgUFJPSkVDVDogJ1RBSycgYXMgY29uc3QsXG4gIC8qKiBDb21wb25lbnQgaWRlbnRpZmllciBmb3IgYXV0aCBpbmZyYXN0cnVjdHVyZSAqL1xuICBBVVRIX0NPTVBPTkVOVDogJ0F1dGhJbmZyYScgYXMgY29uc3QsXG4gIC8qKiBNYW5hZ2VkIGJ5IGlkZW50aWZpZXIgKi9cbiAgTUFOQUdFRF9CWTogJ0NESycgYXMgY29uc3QsXG59IGFzIGNvbnN0O1xuXG4vKipcbiAqIFNlY3JldCBuYW1lIGNvbnN0YW50cyBmb3IgQVdTIFNlY3JldHMgTWFuYWdlclxuICogVGhlc2UgYXJlIHVzZWQgYXMgYWxpYXNlcy9uYW1lcyBmb3Igc2VjcmV0cywgbm90IGFjdHVhbCBzZWNyZXQgdmFsdWVzXG4gKi9cbmV4cG9ydCBjb25zdCBTRUNSRVRfTkFNRVMgPSB7XG4gIC8qKiBBdXRoZW50aWsgc2VjcmV0IGtleSBhbGlhcyAqL1xuICBBVVRIRU5USUtfU0VDUkVUX0tFWTogJ2F1dGhlbnRpay1zZWNyZXQta2V5JyBhcyBjb25zdCxcbiAgLyoqIEF1dGhlbnRpayBQb3N0Z3JlU1FMIHBhc3N3b3JkIGFsaWFzICovXG4gIEFVVEhFTlRJS19QT1NUR1JFU19QQVNTV09SRDogJ2F1dGhlbnRpay1wb3N0Z3Jlcy1wYXNzd29yZCcgYXMgY29uc3QsXG4gIC8qKiBBdXRoZW50aWsgUmVkaXMgcGFzc3dvcmQgYWxpYXMgKi9cbiAgQVVUSEVOVElLX1JFRElTX1BBU1NXT1JEOiAnYXV0aGVudGlrLXJlZGlzLXBhc3N3b3JkJyBhcyBjb25zdCxcbiAgLyoqIExEQVAgYWRtaW4gcGFzc3dvcmQgYWxpYXMgKi9cbiAgTERBUF9BRE1JTl9QQVNTV09SRDogJ2xkYXAtYWRtaW4tcGFzc3dvcmQnIGFzIGNvbnN0LFxuICAvKiogTERBUCBjb25maWcgcGFzc3dvcmQgYWxpYXMgKi9cbiAgTERBUF9DT05GSUdfUEFTU1dPUkQ6ICdsZGFwLWNvbmZpZy1wYXNzd29yZCcgYXMgY29uc3QsXG4gIC8qKiBMREFQIHJlYWRvbmx5IHVzZXIgYWxpYXMgKi9cbiAgTERBUF9SRUFET05MWV9VU0VSOiAncmVhZG9ubHknIGFzIGNvbnN0LFxuICAvKiogTERBUCByZWFkb25seSBwYXNzd29yZCBhbGlhcyAqL1xuICBMREFQX1JFQURPTkxZX1BBU1NXT1JEOiAnbGRhcC1yZWFkb25seS1wYXNzd29yZCcgYXMgY29uc3QsXG59IGFzIGNvbnN0O1xuIl19