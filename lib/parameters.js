"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOCKER_IMAGE_LOCATION = exports.USE_AUTHENTIK_CONFIG_FILE = exports.SSL_CERTIFICATE_ARN = exports.IP_ADDRESS_TYPE = exports.AUTHENTIK_LDAP_BASE_DN = exports.AUTHENTIK_ADMIN_USER_EMAIL = exports.ENABLE_EXECUTE = exports.GIT_SHA = exports.ENV_TYPE = void 0;
exports.getGitSha = getGitSha;
exports.getParameters = getParameters;
exports.resolveStackParameters = resolveStackParameters;
const child_process_1 = require("child_process");
const environment_config_1 = require("./environment-config");
// Direct parameter exports following the reference pattern
exports.ENV_TYPE = process.env.ENV_TYPE || 'dev-test';
exports.GIT_SHA = process.env.GIT_SHA;
exports.ENABLE_EXECUTE = process.env.ENABLE_EXECUTE;
exports.AUTHENTIK_ADMIN_USER_EMAIL = process.env.AUTHENTIK_ADMIN_USER_EMAIL;
exports.AUTHENTIK_LDAP_BASE_DN = process.env.AUTHENTIK_LDAP_BASE_DN;
exports.IP_ADDRESS_TYPE = process.env.IP_ADDRESS_TYPE;
exports.SSL_CERTIFICATE_ARN = process.env.SSL_CERTIFICATE_ARN;
exports.USE_AUTHENTIK_CONFIG_FILE = process.env.USE_AUTHENTIK_CONFIG_FILE;
exports.DOCKER_IMAGE_LOCATION = process.env.DOCKER_IMAGE_LOCATION;
/**
 * Get the current git SHA for tagging resources
 * @returns Current git SHA
 */
function getGitSha() {
    try {
        // Get the current git SHA
        return (0, child_process_1.execSync)('git rev-parse --short HEAD').toString().trim();
    }
    catch (error) {
        console.warn('Unable to get git SHA, using "development"');
        return 'development';
    }
}
function getParameters() {
    return {
        envType: exports.ENV_TYPE,
        gitSha: exports.GIT_SHA || getGitSha(),
        enableExecute: exports.ENABLE_EXECUTE === 'true' || false,
    };
}
/**
 * Resolves all AuthInfra stack parameters using cascading resolution
 * Priority: 1. Environment Variables, 2. CDK Context, 3. Default Values
 */
function resolveStackParameters(stack) {
    // Environment variables (first priority)
    const STACK_NAME_ENV = process.env.STACK_NAME;
    // Context values (second priority)
    const envTypeFromContext = stack.node.tryGetContext('envType');
    const stackNameFromContext = stack.node.tryGetContext('stackName');
    const gitShaFromContext = stack.node.tryGetContext('gitSha');
    const enableExecuteFromContext = stack.node.tryGetContext('enableExecute');
    const authentikAdminUserEmailFromContext = stack.node.tryGetContext('authentikAdminUserEmail');
    const authentikLdapBaseDnFromContext = stack.node.tryGetContext('authentikLdapBaseDn');
    const ipAddressTypeFromContext = stack.node.tryGetContext('ipAddressType');
    const sslCertificateArnFromContext = stack.node.tryGetContext('sslCertificateArn');
    const useAuthentikConfigFileFromContext = stack.node.tryGetContext('useAuthentikConfigFile');
    const dockerImageLocationFromContext = stack.node.tryGetContext('dockerImageLocation');
    const authentikHostFromContext = stack.node.tryGetContext('authentikHost');
    // Resolution with environment variables taking precedence
    const envType = process.env.ENV_TYPE || envTypeFromContext || 'dev-test';
    const stackName = STACK_NAME_ENV || stackNameFromContext || 'MyFirstStack';
    const gitSha = exports.GIT_SHA || gitShaFromContext || getGitSha();
    // Get environment-specific configuration
    const envConfig = (0, environment_config_1.getEnvironmentConfig)(envType);
    // Boolean parameters: Environment variables override context, which overrides defaults
    const enableExecute = exports.ENABLE_EXECUTE !== undefined
        ? Boolean(exports.ENABLE_EXECUTE === 'true')
        : enableExecuteFromContext !== undefined
            ? Boolean(enableExecuteFromContext)
            : false;
    const useAuthentikConfigFile = exports.USE_AUTHENTIK_CONFIG_FILE !== undefined
        ? Boolean(exports.USE_AUTHENTIK_CONFIG_FILE === 'true')
        : useAuthentikConfigFileFromContext !== undefined
            ? Boolean(useAuthentikConfigFileFromContext)
            : false;
    // String parameters with validation
    const authentikAdminUserEmail = exports.AUTHENTIK_ADMIN_USER_EMAIL || authentikAdminUserEmailFromContext || '';
    const authentikLdapBaseDn = exports.AUTHENTIK_LDAP_BASE_DN || authentikLdapBaseDnFromContext || 'DC=example,DC=com';
    const ipAddressType = (exports.IP_ADDRESS_TYPE || ipAddressTypeFromContext || 'dualstack');
    const sslCertificateArn = exports.SSL_CERTIFICATE_ARN || sslCertificateArnFromContext || '';
    const dockerImageLocation = (exports.DOCKER_IMAGE_LOCATION || dockerImageLocationFromContext || 'Github');
    // For LDAP, the authentik host will be derived from the Authentik construct within the same stack
    // This is a placeholder that gets overridden during stack construction
    const authentikHost = process.env.AUTHENTIK_HOST || authentikHostFromContext || 'localhost';
    // Validate required parameters
    if (!authentikAdminUserEmail) {
        throw new Error('authentikAdminUserEmail is required. Set it via --context authentikAdminUserEmail=user@example.com or AUTHENTIK_ADMIN_USER_EMAIL environment variable.');
    }
    return {
        envType,
        stackName,
        gitSha,
        enableExecute,
        authentikAdminUserEmail,
        authentikLdapBaseDn,
        ipAddressType,
        sslCertificateArn,
        useAuthentikConfigFile,
        dockerImageLocation,
        authentikHost,
    };
}
//# sourceMappingURL=data:application/json;base64,