import { execSync } from 'child_process';
/**
 * Get the current git SHA for tagging resources
 * @returns Current git SHA
 */
export function getGitSha() {
    try {
        // Get the current git SHA
        return execSync('git rev-parse --short HEAD').toString().trim();
    }
    catch (error) {
        console.warn('Unable to get git SHA, using "development"');
        return 'development';
    }
}
/**
 * Resolve Auth Infrastructure parameters from environment variables and CDK context
 * @param app - CDK App instance
 * @param stackName - The name of the stack
 * @param envType - The environment type (prod or dev-test)
 * @returns Resolved parameters for auth infrastructure stack
 */
export function resolveAuthInfraParameters(app, stackName, envType) {
    return {
        gitSha: getGitSha(),
        environment: stackName,
        envType: envType,
        enableExecute: app.node.tryGetContext('enableExecute') === 'true' ||
            process.env.ENABLE_EXECUTE === 'true' ||
            false,
        sslCertificateArn: app.node.tryGetContext('sslCertificateArn') ||
            process.env.SSL_CERTIFICATE_ARN ||
            '',
        authentikAdminUserEmail: app.node.tryGetContext('authentikAdminUserEmail') ||
            process.env.AUTHENTIK_ADMIN_USER_EMAIL ||
            '',
        authentikLdapBaseDn: app.node.tryGetContext('authentikLdapBaseDn') ||
            process.env.AUTHENTIK_LDAP_BASE_DN ||
            'DC=example,DC=com',
        useAuthentikConfigFile: app.node.tryGetContext('useAuthentikConfigFile') === 'true' ||
            process.env.USE_AUTHENTIK_CONFIG_FILE === 'true' ||
            false,
        ipAddressType: (app.node.tryGetContext('ipAddressType') ||
            process.env.IP_ADDRESS_TYPE ||
            'dualstack'),
        dockerImageLocation: (app.node.tryGetContext('dockerImageLocation') ||
            process.env.DOCKER_IMAGE_LOCATION ||
            'Github'),
    };
}
/**
 * Resolve LDAP stack parameters from environment variables and CDK context
 * @param app - CDK App instance
 * @param stackName - The name of the stack
 * @param envType - The environment type (prod or dev-test)
 * @returns Resolved parameters for LDAP stack
 */
export function resolveLdapParameters(app, stackName, envType) {
    return {
        gitSha: getGitSha(),
        environment: stackName,
        envType: envType,
        enableExecute: app.node.tryGetContext('enableExecute') === 'true' ||
            process.env.ENABLE_EXECUTE === 'true' ||
            false,
        sslCertificateArn: app.node.tryGetContext('sslCertificateArn') ||
            process.env.SSL_CERTIFICATE_ARN ||
            '',
        authentikHost: app.node.tryGetContext('authentikHost') ||
            process.env.AUTHENTIK_HOST ||
            '',
        dockerImageLocation: (app.node.tryGetContext('dockerImageLocation') ||
            process.env.DOCKER_IMAGE_LOCATION ||
            'Github'),
    };
}
//# sourceMappingURL=data:application/json;base64,