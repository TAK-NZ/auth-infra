/**
 * Utility for consistent stack naming and export/import value helpers
 */
import { Fn } from 'aws-cdk-lib';
/**
 * Fixed configuration values for stack naming
 */
export const FIXED_STACK_CONFIG = {
    PROJECT: 'tak',
    AUTH_STACK_PREFIX: 'auth-infra',
    LDAP_STACK_PREFIX: 'ldap',
};
/**
 * Generate consistent stack name for the Auth Infra stack
 * @param environment - Environment name (e.g. 'prod', 'dev', 'test', etc.)
 * @returns Full stack name for the auth infrastructure
 */
export function generateAuthInfraStackName(environment) {
    return `${FIXED_STACK_CONFIG.PROJECT}-${FIXED_STACK_CONFIG.AUTH_STACK_PREFIX}-${environment}`;
}
/**
 * Generate consistent stack name for the LDAP stack
 * @param environment - Environment name (e.g. 'prod', 'dev', 'test', etc.)
 * @returns Full stack name for the LDAP stack
 */
export function generateLdapStackName(environment) {
    return `${FIXED_STACK_CONFIG.PROJECT}-${FIXED_STACK_CONFIG.LDAP_STACK_PREFIX}-${environment}`;
}
/**
 * Helper to generate consistent import value names from the base infrastructure stack
 * @param environment - Environment name (e.g. 'prod', 'dev', 'test', etc.)
 * @param exportName - The specific export name suffix (e.g. 'vpc-id', 'subnet-private-a', etc.)
 * @returns Full import value reference string
 */
export function importBaseInfraValue(environment, exportName) {
    return Fn.importValue(`coe-base-${environment}-${exportName}`);
}
/**
 * Helper to generate consistent export value names for the auth infrastructure stack
 * @param environment - Environment name (e.g. 'prod', 'dev', 'test', etc.)
 * @param exportName - The specific export name suffix
 * @returns Full export value name
 */
export function generateAuthInfraExportName(environment, exportName) {
    return `${generateAuthInfraStackName(environment)}-${exportName}`;
}
/**
 * Helper to generate consistent export value names for the LDAP stack
 * @param environment - Environment name (e.g. 'prod', 'dev', 'test', etc.)
 * @param exportName - The specific export name suffix
 * @returns Full export value name
 */
export function generateLdapExportName(environment, exportName) {
    return `${generateLdapStackName(environment)}-${exportName}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2stbmFtaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhY2stbmFtaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBQ0gsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVqQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2hDLE9BQU8sRUFBRSxLQUFLO0lBQ2QsaUJBQWlCLEVBQUUsWUFBWTtJQUMvQixpQkFBaUIsRUFBRSxNQUFNO0NBQ2pCLENBQUM7QUFFWDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLDBCQUEwQixDQUFDLFdBQW1CO0lBQzVELE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLElBQUksa0JBQWtCLENBQUMsaUJBQWlCLElBQUksV0FBVyxFQUFFLENBQUM7QUFDaEcsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUscUJBQXFCLENBQUMsV0FBbUI7SUFDdkQsT0FBTyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxpQkFBaUIsSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUNoRyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsV0FBbUIsRUFBRSxVQUFrQjtJQUMxRSxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsWUFBWSxXQUFXLElBQUksVUFBVSxFQUFFLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsMkJBQTJCLENBQUMsV0FBbUIsRUFBRSxVQUFrQjtJQUNqRixPQUFPLEdBQUcsMEJBQTBCLENBQUMsV0FBVyxDQUFDLElBQUksVUFBVSxFQUFFLENBQUM7QUFDcEUsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLHNCQUFzQixDQUFDLFdBQW1CLEVBQUUsVUFBa0I7SUFDNUUsT0FBTyxHQUFHLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQy9ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdHkgZm9yIGNvbnNpc3RlbnQgc3RhY2sgbmFtaW5nIGFuZCBleHBvcnQvaW1wb3J0IHZhbHVlIGhlbHBlcnNcbiAqL1xuaW1wb3J0IHsgRm4gfSBmcm9tICdhd3MtY2RrLWxpYic7XG5cbi8qKlxuICogRml4ZWQgY29uZmlndXJhdGlvbiB2YWx1ZXMgZm9yIHN0YWNrIG5hbWluZ1xuICovXG5leHBvcnQgY29uc3QgRklYRURfU1RBQ0tfQ09ORklHID0ge1xuICBQUk9KRUNUOiAndGFrJyxcbiAgQVVUSF9TVEFDS19QUkVGSVg6ICdhdXRoLWluZnJhJyxcbiAgTERBUF9TVEFDS19QUkVGSVg6ICdsZGFwJyxcbn0gYXMgY29uc3Q7XG5cbi8qKlxuICogR2VuZXJhdGUgY29uc2lzdGVudCBzdGFjayBuYW1lIGZvciB0aGUgQXV0aCBJbmZyYSBzdGFja1xuICogQHBhcmFtIGVudmlyb25tZW50IC0gRW52aXJvbm1lbnQgbmFtZSAoZS5nLiAncHJvZCcsICdkZXYnLCAndGVzdCcsIGV0Yy4pXG4gKiBAcmV0dXJucyBGdWxsIHN0YWNrIG5hbWUgZm9yIHRoZSBhdXRoIGluZnJhc3RydWN0dXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUF1dGhJbmZyYVN0YWNrTmFtZShlbnZpcm9ubWVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke0ZJWEVEX1NUQUNLX0NPTkZJRy5QUk9KRUNUfS0ke0ZJWEVEX1NUQUNLX0NPTkZJRy5BVVRIX1NUQUNLX1BSRUZJWH0tJHtlbnZpcm9ubWVudH1gO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGNvbnNpc3RlbnQgc3RhY2sgbmFtZSBmb3IgdGhlIExEQVAgc3RhY2tcbiAqIEBwYXJhbSBlbnZpcm9ubWVudCAtIEVudmlyb25tZW50IG5hbWUgKGUuZy4gJ3Byb2QnLCAnZGV2JywgJ3Rlc3QnLCBldGMuKVxuICogQHJldHVybnMgRnVsbCBzdGFjayBuYW1lIGZvciB0aGUgTERBUCBzdGFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVMZGFwU3RhY2tOYW1lKGVudmlyb25tZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYCR7RklYRURfU1RBQ0tfQ09ORklHLlBST0pFQ1R9LSR7RklYRURfU1RBQ0tfQ09ORklHLkxEQVBfU1RBQ0tfUFJFRklYfS0ke2Vudmlyb25tZW50fWA7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdlbmVyYXRlIGNvbnNpc3RlbnQgaW1wb3J0IHZhbHVlIG5hbWVzIGZyb20gdGhlIGJhc2UgaW5mcmFzdHJ1Y3R1cmUgc3RhY2tcbiAqIEBwYXJhbSBlbnZpcm9ubWVudCAtIEVudmlyb25tZW50IG5hbWUgKGUuZy4gJ3Byb2QnLCAnZGV2JywgJ3Rlc3QnLCBldGMuKVxuICogQHBhcmFtIGV4cG9ydE5hbWUgLSBUaGUgc3BlY2lmaWMgZXhwb3J0IG5hbWUgc3VmZml4IChlLmcuICd2cGMtaWQnLCAnc3VibmV0LXByaXZhdGUtYScsIGV0Yy4pXG4gKiBAcmV0dXJucyBGdWxsIGltcG9ydCB2YWx1ZSByZWZlcmVuY2Ugc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbXBvcnRCYXNlSW5mcmFWYWx1ZShlbnZpcm9ubWVudDogc3RyaW5nLCBleHBvcnROYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gRm4uaW1wb3J0VmFsdWUoYGNvZS1iYXNlLSR7ZW52aXJvbm1lbnR9LSR7ZXhwb3J0TmFtZX1gKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2VuZXJhdGUgY29uc2lzdGVudCBleHBvcnQgdmFsdWUgbmFtZXMgZm9yIHRoZSBhdXRoIGluZnJhc3RydWN0dXJlIHN0YWNrXG4gKiBAcGFyYW0gZW52aXJvbm1lbnQgLSBFbnZpcm9ubWVudCBuYW1lIChlLmcuICdwcm9kJywgJ2RldicsICd0ZXN0JywgZXRjLilcbiAqIEBwYXJhbSBleHBvcnROYW1lIC0gVGhlIHNwZWNpZmljIGV4cG9ydCBuYW1lIHN1ZmZpeFxuICogQHJldHVybnMgRnVsbCBleHBvcnQgdmFsdWUgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVBdXRoSW5mcmFFeHBvcnROYW1lKGVudmlyb25tZW50OiBzdHJpbmcsIGV4cG9ydE5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgJHtnZW5lcmF0ZUF1dGhJbmZyYVN0YWNrTmFtZShlbnZpcm9ubWVudCl9LSR7ZXhwb3J0TmFtZX1gO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZW5lcmF0ZSBjb25zaXN0ZW50IGV4cG9ydCB2YWx1ZSBuYW1lcyBmb3IgdGhlIExEQVAgc3RhY2tcbiAqIEBwYXJhbSBlbnZpcm9ubWVudCAtIEVudmlyb25tZW50IG5hbWUgKGUuZy4gJ3Byb2QnLCAnZGV2JywgJ3Rlc3QnLCBldGMuKVxuICogQHBhcmFtIGV4cG9ydE5hbWUgLSBUaGUgc3BlY2lmaWMgZXhwb3J0IG5hbWUgc3VmZml4XG4gKiBAcmV0dXJucyBGdWxsIGV4cG9ydCB2YWx1ZSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUxkYXBFeHBvcnROYW1lKGVudmlyb25tZW50OiBzdHJpbmcsIGV4cG9ydE5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgJHtnZW5lcmF0ZUxkYXBTdGFja05hbWUoZW52aXJvbm1lbnQpfS0ke2V4cG9ydE5hbWV9YDtcbn1cbiJdfQ==