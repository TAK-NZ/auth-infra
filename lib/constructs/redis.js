"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redis = void 0;
/**
 * Redis Construct - CDK implementation of the Redis/Valkey cache
 */
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * CDK construct for the Redis/Valkey cache cluster
 */
class Redis extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Derive environment-specific values from context (matches reference pattern)
        const isHighAvailability = props.environment === 'prod';
        const automaticFailoverEnabled = props.contextConfig.redis.numCacheNodes > 1;
        // Create the auth token secret
        this.authToken = new aws_cdk_lib_1.aws_secretsmanager.Secret(this, 'RedisAuthToken', {
            description: `${id}: Auth Token`,
            secretName: `${props.stackName}/Redis/Auth-Token`,
            encryptionKey: props.infrastructure.kmsKey,
            generateSecretString: {
                excludePunctuation: true,
                passwordLength: 64
            }
        });
        // Create subnet group
        const subnetGroup = new aws_cdk_lib_1.aws_elasticache.CfnSubnetGroup(this, 'RedisSubnetGroup', {
            description: `${id}-redis-subnets`,
            subnetIds: props.infrastructure.vpc.privateSubnets.map(subnet => subnet.subnetId)
        });
        // Create security group
        const securityGroup = new aws_cdk_lib_1.aws_ec2.SecurityGroup(this, '-SecurityGroup', {
            vpc: props.infrastructure.vpc,
            description: `${id} Security Group`,
            allowAllOutbound: false
        });
        // Allow Redis port from other security groups
        props.securityGroups.forEach(sg => {
            securityGroup.addIngressRule(aws_cdk_lib_1.aws_ec2.Peer.securityGroupId(sg.securityGroupId), aws_cdk_lib_1.aws_ec2.Port.tcp(6379), 'Allow Redis access from ECS tasks');
        });
        // Create the Redis replication group
        this.replicationGroup = new aws_cdk_lib_1.aws_elasticache.CfnReplicationGroup(this, 'Redis', {
            replicationGroupDescription: 'Valkey (Redis) cluster for Authentik',
            automaticFailoverEnabled: automaticFailoverEnabled,
            atRestEncryptionEnabled: true,
            transitEncryptionEnabled: true,
            transitEncryptionMode: 'required',
            authToken: this.authToken.secretValue.unsafeUnwrap(),
            kmsKeyId: props.infrastructure.kmsKey.keyArn,
            cacheNodeType: props.contextConfig.redis.nodeType,
            cacheSubnetGroupName: subnetGroup.ref,
            engine: 'valkey',
            engineVersion: '7.2',
            autoMinorVersionUpgrade: true,
            numCacheClusters: props.contextConfig.redis.numCacheNodes,
            securityGroupIds: [securityGroup.securityGroupId]
        });
        // Set dependencies
        this.replicationGroup.addDependency(subnetGroup);
        // Store the hostname
        this.hostname = this.replicationGroup.attrPrimaryEndPointAddress;
    }
}
exports.Redis = Redis;
//# sourceMappingURL=data:application/json;base64,