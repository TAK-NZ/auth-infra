"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redis = void 0;
/**
 * Redis Construct - CDK implementation of the Redis/Valkey cache
 */
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * CDK construct for the Redis/Valkey cache cluster
 */
class Redis extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Create the auth token secret
        this.authToken = new aws_cdk_lib_1.aws_secretsmanager.Secret(this, 'RedisAuthToken', {
            description: `${id}: Auth Token`,
            secretName: `${props.stackName}/Redis/Auth-Token`,
            encryptionKey: props.infrastructure.kmsKey,
            generateSecretString: {
                excludePunctuation: true,
                passwordLength: 64
            }
        });
        // Create subnet group
        const subnetGroup = new aws_cdk_lib_1.aws_elasticache.CfnSubnetGroup(this, 'RedisSubnetGroup', {
            description: `${id}-redis-subnets`,
            subnetIds: props.infrastructure.vpc.privateSubnets.map(subnet => subnet.subnetId)
        });
        // Create security group
        const securityGroup = new aws_cdk_lib_1.aws_ec2.SecurityGroup(this, '-SecurityGroup', {
            vpc: props.infrastructure.vpc,
            description: `${id} Security Group`,
            allowAllOutbound: false
        });
        // Allow Redis port from other security groups
        props.securityGroups.forEach(sg => {
            securityGroup.addIngressRule(aws_cdk_lib_1.aws_ec2.Peer.securityGroupId(sg.securityGroupId), aws_cdk_lib_1.aws_ec2.Port.tcp(6379), 'Allow Redis access from ECS tasks');
        });
        // Create the Redis replication group
        this.replicationGroup = new aws_cdk_lib_1.aws_elasticache.CfnReplicationGroup(this, 'Redis', {
            replicationGroupDescription: 'Valkey (Redis) cluster for Authentik',
            automaticFailoverEnabled: props.config.redis.automaticFailoverEnabled,
            atRestEncryptionEnabled: true,
            transitEncryptionEnabled: true,
            transitEncryptionMode: 'required',
            authToken: this.authToken.secretValue.unsafeUnwrap(),
            kmsKeyId: props.infrastructure.kmsKey.keyArn,
            cacheNodeType: props.config.redis.nodeType,
            cacheSubnetGroupName: subnetGroup.ref,
            engine: 'valkey',
            engineVersion: '7.2',
            autoMinorVersionUpgrade: true,
            numCacheClusters: props.config.redis.numCacheClusters,
            securityGroupIds: [securityGroup.securityGroupId]
        });
        // Set dependencies
        this.replicationGroup.addDependency(subnetGroup);
        // Store the hostname
        this.hostname = this.replicationGroup.attrPrimaryEndPointAddress;
    }
}
exports.Redis = Redis;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWRpcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILDJDQUF1QztBQUN2Qyw2Q0FLcUI7QUFtQ3JCOztHQUVHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsc0JBQVM7SUFnQmxDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBaUI7UUFDekQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQiwrQkFBK0I7UUFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGdDQUFjLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUNqRSxXQUFXLEVBQUUsR0FBRyxFQUFFLGNBQWM7WUFDaEMsVUFBVSxFQUFFLEdBQUcsS0FBSyxDQUFDLFNBQVMsbUJBQW1CO1lBQ2pELGFBQWEsRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU07WUFDMUMsb0JBQW9CLEVBQUU7Z0JBQ3BCLGtCQUFrQixFQUFFLElBQUk7Z0JBQ3hCLGNBQWMsRUFBRSxFQUFFO2FBQ25CO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsc0JBQXNCO1FBQ3RCLE1BQU0sV0FBVyxHQUFHLElBQUksNkJBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQzNFLFdBQVcsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCO1lBQ2xDLFNBQVMsRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztTQUNsRixDQUFDLENBQUM7UUFFSCx3QkFBd0I7UUFDeEIsTUFBTSxhQUFhLEdBQUcsSUFBSSxxQkFBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUU7WUFDbEUsR0FBRyxFQUFFLEtBQUssQ0FBQyxjQUFjLENBQUMsR0FBRztZQUM3QixXQUFXLEVBQUUsR0FBRyxFQUFFLGlCQUFpQjtZQUNuQyxnQkFBZ0IsRUFBRSxLQUFLO1NBQ3hCLENBQUMsQ0FBQztRQUVILDhDQUE4QztRQUM5QyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNoQyxhQUFhLENBQUMsY0FBYyxDQUMxQixxQkFBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUM1QyxxQkFBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQ2xCLG1DQUFtQyxDQUNwQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxxQ0FBcUM7UUFDckMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksNkJBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO1lBQ3pFLDJCQUEyQixFQUFFLHNDQUFzQztZQUNuRSx3QkFBd0IsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyx3QkFBd0I7WUFDckUsdUJBQXVCLEVBQUUsSUFBSTtZQUM3Qix3QkFBd0IsRUFBRSxJQUFJO1lBQzlCLHFCQUFxQixFQUFFLFVBQVU7WUFDakMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRTtZQUNwRCxRQUFRLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTTtZQUM1QyxhQUFhLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUTtZQUMxQyxvQkFBb0IsRUFBRSxXQUFXLENBQUMsR0FBRztZQUNyQyxNQUFNLEVBQUUsUUFBUTtZQUNoQixhQUFhLEVBQUUsS0FBSztZQUNwQix1QkFBdUIsRUFBRSxJQUFJO1lBQzdCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQjtZQUNyRCxnQkFBZ0IsRUFBRSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUM7U0FDbEQsQ0FBQyxDQUFDO1FBRUgsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFakQscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLDBCQUEwQixDQUFDO0lBQ25FLENBQUM7Q0FDRjtBQTVFRCxzQkE0RUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlZGlzIENvbnN0cnVjdCAtIENESyBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgUmVkaXMvVmFsa2V5IGNhY2hlXG4gKi9cbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHtcbiAgYXdzX2VsYXN0aWNhY2hlIGFzIGVsYXN0aWNhY2hlLFxuICBhd3NfZWMyIGFzIGVjMixcbiAgYXdzX3NlY3JldHNtYW5hZ2VyIGFzIHNlY3JldHNtYW5hZ2VyLFxuICBhd3Nfa21zIGFzIGttc1xufSBmcm9tICdhd3MtY2RrLWxpYic7XG5cbmltcG9ydCB0eXBlIHsgQXV0aEluZnJhRW52aXJvbm1lbnRDb25maWcgfSBmcm9tICcuLi9lbnZpcm9ubWVudC1jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBJbmZyYXN0cnVjdHVyZUNvbmZpZyB9IGZyb20gJy4uL2NvbnN0cnVjdC1jb25maWdzJztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciB0aGUgUmVkaXMgY29uc3RydWN0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVkaXNQcm9wcyB7XG4gIC8qKlxuICAgKiBFbnZpcm9ubWVudCBuYW1lIChlLmcuICdwcm9kJywgJ2RldicsIGV0Yy4pXG4gICAqL1xuICBlbnZpcm9ubWVudDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGdWxsIHN0YWNrIG5hbWUgKGUuZy4sICdUQUstRGVtby1BdXRoSW5mcmEnKVxuICAgKi9cbiAgc3RhY2tOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEVudmlyb25tZW50IGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGNvbmZpZzogQXV0aEluZnJhRW52aXJvbm1lbnRDb25maWc7XG5cbiAgLyoqXG4gICAqIEluZnJhc3RydWN0dXJlIGNvbmZpZ3VyYXRpb24gKFZQQywgS01TLCBzZWN1cml0eSBncm91cHMpXG4gICAqL1xuICBpbmZyYXN0cnVjdHVyZTogSW5mcmFzdHJ1Y3R1cmVDb25maWc7XG5cbiAgLyoqXG4gICAqIFNlY3VyaXR5IGdyb3VwcyBmb3IgUmVkaXMgYWNjZXNzXG4gICAqL1xuICBzZWN1cml0eUdyb3VwczogZWMyLlNlY3VyaXR5R3JvdXBbXTtcbn1cblxuLyoqXG4gKiBDREsgY29uc3RydWN0IGZvciB0aGUgUmVkaXMvVmFsa2V5IGNhY2hlIGNsdXN0ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFJlZGlzIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgLyoqXG4gICAqIFRoZSBhdXRoIHRva2VuIHNlY3JldCBmb3IgUmVkaXNcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhdXRoVG9rZW46IHNlY3JldHNtYW5hZ2VyLlNlY3JldDtcblxuICAvKipcbiAgICogVGhlIFJlZGlzIHJlcGxpY2F0aW9uIGdyb3VwXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgcmVwbGljYXRpb25Hcm91cDogZWxhc3RpY2FjaGUuQ2ZuUmVwbGljYXRpb25Hcm91cDtcblxuICAvKipcbiAgICogVGhlIFJlZGlzIGhvc3RuYW1lXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgaG9zdG5hbWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUmVkaXNQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAvLyBDcmVhdGUgdGhlIGF1dGggdG9rZW4gc2VjcmV0XG4gICAgdGhpcy5hdXRoVG9rZW4gPSBuZXcgc2VjcmV0c21hbmFnZXIuU2VjcmV0KHRoaXMsICdSZWRpc0F1dGhUb2tlbicsIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBgJHtpZH06IEF1dGggVG9rZW5gLFxuICAgICAgc2VjcmV0TmFtZTogYCR7cHJvcHMuc3RhY2tOYW1lfS9SZWRpcy9BdXRoLVRva2VuYCxcbiAgICAgIGVuY3J5cHRpb25LZXk6IHByb3BzLmluZnJhc3RydWN0dXJlLmttc0tleSxcbiAgICAgIGdlbmVyYXRlU2VjcmV0U3RyaW5nOiB7XG4gICAgICAgIGV4Y2x1ZGVQdW5jdHVhdGlvbjogdHJ1ZSxcbiAgICAgICAgcGFzc3dvcmRMZW5ndGg6IDY0XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgc3VibmV0IGdyb3VwXG4gICAgY29uc3Qgc3VibmV0R3JvdXAgPSBuZXcgZWxhc3RpY2FjaGUuQ2ZuU3VibmV0R3JvdXAodGhpcywgJ1JlZGlzU3VibmV0R3JvdXAnLCB7XG4gICAgICBkZXNjcmlwdGlvbjogYCR7aWR9LXJlZGlzLXN1Ym5ldHNgLFxuICAgICAgc3VibmV0SWRzOiBwcm9wcy5pbmZyYXN0cnVjdHVyZS52cGMucHJpdmF0ZVN1Ym5ldHMubWFwKHN1Ym5ldCA9PiBzdWJuZXQuc3VibmV0SWQpXG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgc2VjdXJpdHkgZ3JvdXBcbiAgICBjb25zdCBzZWN1cml0eUdyb3VwID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHRoaXMsICctU2VjdXJpdHlHcm91cCcsIHtcbiAgICAgIHZwYzogcHJvcHMuaW5mcmFzdHJ1Y3R1cmUudnBjLFxuICAgICAgZGVzY3JpcHRpb246IGAke2lkfSBTZWN1cml0eSBHcm91cGAsXG4gICAgICBhbGxvd0FsbE91dGJvdW5kOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgLy8gQWxsb3cgUmVkaXMgcG9ydCBmcm9tIG90aGVyIHNlY3VyaXR5IGdyb3Vwc1xuICAgIHByb3BzLnNlY3VyaXR5R3JvdXBzLmZvckVhY2goc2cgPT4ge1xuICAgICAgc2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZShcbiAgICAgICAgZWMyLlBlZXIuc2VjdXJpdHlHcm91cElkKHNnLnNlY3VyaXR5R3JvdXBJZCksXG4gICAgICAgIGVjMi5Qb3J0LnRjcCg2Mzc5KSxcbiAgICAgICAgJ0FsbG93IFJlZGlzIGFjY2VzcyBmcm9tIEVDUyB0YXNrcydcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgdGhlIFJlZGlzIHJlcGxpY2F0aW9uIGdyb3VwXG4gICAgdGhpcy5yZXBsaWNhdGlvbkdyb3VwID0gbmV3IGVsYXN0aWNhY2hlLkNmblJlcGxpY2F0aW9uR3JvdXAodGhpcywgJ1JlZGlzJywge1xuICAgICAgcmVwbGljYXRpb25Hcm91cERlc2NyaXB0aW9uOiAnVmFsa2V5IChSZWRpcykgY2x1c3RlciBmb3IgQXV0aGVudGlrJyxcbiAgICAgIGF1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZDogcHJvcHMuY29uZmlnLnJlZGlzLmF1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZCxcbiAgICAgIGF0UmVzdEVuY3J5cHRpb25FbmFibGVkOiB0cnVlLFxuICAgICAgdHJhbnNpdEVuY3J5cHRpb25FbmFibGVkOiB0cnVlLFxuICAgICAgdHJhbnNpdEVuY3J5cHRpb25Nb2RlOiAncmVxdWlyZWQnLFxuICAgICAgYXV0aFRva2VuOiB0aGlzLmF1dGhUb2tlbi5zZWNyZXRWYWx1ZS51bnNhZmVVbndyYXAoKSxcbiAgICAgIGttc0tleUlkOiBwcm9wcy5pbmZyYXN0cnVjdHVyZS5rbXNLZXkua2V5QXJuLFxuICAgICAgY2FjaGVOb2RlVHlwZTogcHJvcHMuY29uZmlnLnJlZGlzLm5vZGVUeXBlLFxuICAgICAgY2FjaGVTdWJuZXRHcm91cE5hbWU6IHN1Ym5ldEdyb3VwLnJlZixcbiAgICAgIGVuZ2luZTogJ3ZhbGtleScsXG4gICAgICBlbmdpbmVWZXJzaW9uOiAnNy4yJyxcbiAgICAgIGF1dG9NaW5vclZlcnNpb25VcGdyYWRlOiB0cnVlLFxuICAgICAgbnVtQ2FjaGVDbHVzdGVyczogcHJvcHMuY29uZmlnLnJlZGlzLm51bUNhY2hlQ2x1c3RlcnMsXG4gICAgICBzZWN1cml0eUdyb3VwSWRzOiBbc2VjdXJpdHlHcm91cC5zZWN1cml0eUdyb3VwSWRdXG4gICAgfSk7XG5cbiAgICAvLyBTZXQgZGVwZW5kZW5jaWVzXG4gICAgdGhpcy5yZXBsaWNhdGlvbkdyb3VwLmFkZERlcGVuZGVuY3koc3VibmV0R3JvdXApO1xuXG4gICAgLy8gU3RvcmUgdGhlIGhvc3RuYW1lXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMucmVwbGljYXRpb25Hcm91cC5hdHRyUHJpbWFyeUVuZFBvaW50QWRkcmVzcztcbiAgfVxufVxuIl19