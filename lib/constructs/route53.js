"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53 = void 0;
/**
 * Route53 LDAP Construct - DNS record management for LDAP service only
 *
 * This construct creates only the LDAP DNS records. Authentik DNS records
 * are handled by the Route53Authentik construct.
 */
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * CDK construct for Route53 DNS record management - LDAP only
 */
class Route53 extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Import the hosted zone from base infrastructure
        this.hostedZone = aws_cdk_lib_1.aws_route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {
            hostedZoneId: props.network.hostedZoneId,
            zoneName: props.network.hostedZoneName
        });
        // Calculate full domain name
        this.ldapFqdn = `${props.network.hostname}.${props.network.hostedZoneName}`;
        // Create A record alias for LDAP (IPv4 only for NLB)
        this.ldapARecord = new aws_cdk_lib_1.aws_route53.ARecord(this, 'LdapARecord', {
            zone: this.hostedZone,
            recordName: props.network.hostname,
            target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.LoadBalancerTarget(props.ldapLoadBalancer)),
            comment: `LDAP IPv4 alias record for ${props.environment} environment`
        });
    }
    /**
     * Get the LDAP service hostname
     */
    getLdapHostname() {
        return this.ldapFqdn;
    }
}
exports.Route53 = Route53;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGU1My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJvdXRlNTMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7O0dBS0c7QUFDSCwyQ0FBdUM7QUFDdkMsNkNBSXFCO0FBNkJyQjs7R0FFRztBQUNILE1BQWEsT0FBUSxTQUFRLHNCQUFTO0lBZ0JwQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW1CO1FBQzNELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxVQUFVLEdBQUcseUJBQU8sQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUNoRixZQUFZLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZO1lBQ3hDLFFBQVEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWM7U0FDdkMsQ0FBQyxDQUFDO1FBRUgsNkJBQTZCO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRTVFLHFEQUFxRDtRQUNyRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUkseUJBQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUMxRCxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDckIsVUFBVSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUTtZQUNsQyxNQUFNLEVBQUUseUJBQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUNwQyxJQUFJLGlDQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQ3ZEO1lBQ0QsT0FBTyxFQUFFLDhCQUE4QixLQUFLLENBQUMsV0FBVyxjQUFjO1NBQ3ZFLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLGVBQWU7UUFDcEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQTdDRCwwQkE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJvdXRlNTMgTERBUCBDb25zdHJ1Y3QgLSBETlMgcmVjb3JkIG1hbmFnZW1lbnQgZm9yIExEQVAgc2VydmljZSBvbmx5XG4gKiBcbiAqIFRoaXMgY29uc3RydWN0IGNyZWF0ZXMgb25seSB0aGUgTERBUCBETlMgcmVjb3Jkcy4gQXV0aGVudGlrIEROUyByZWNvcmRzXG4gKiBhcmUgaGFuZGxlZCBieSB0aGUgUm91dGU1M0F1dGhlbnRpayBjb25zdHJ1Y3QuXG4gKi9cbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHtcbiAgYXdzX3JvdXRlNTMgYXMgcm91dGU1MyxcbiAgYXdzX3JvdXRlNTNfdGFyZ2V0cyBhcyB0YXJnZXRzLFxuICBhd3NfZWxhc3RpY2xvYWRiYWxhbmNpbmd2MiBhcyBlbGJ2MlxufSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgdHlwZSB7IENvbnRleHRFbnZpcm9ubWVudENvbmZpZyB9IGZyb20gJy4uL3N0YWNrLWNvbmZpZyc7XG5pbXBvcnQgdHlwZSB7IE5ldHdvcmtDb25maWcgfSBmcm9tICcuLi9jb25zdHJ1Y3QtY29uZmlncyc7XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgdGhlIFJvdXRlNTMgTERBUCBjb25zdHJ1Y3RcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZTUzUHJvcHMge1xuICAvKipcbiAgICogRW52aXJvbm1lbnQgbmFtZSAoZS5nLiAncHJvZCcsICdkZXYnLCBldGMuKVxuICAgKi9cbiAgZW52aXJvbm1lbnQ6ICdwcm9kJyB8ICdkZXYtdGVzdCc7XG5cbiAgLyoqXG4gICAqIEVudmlyb25tZW50IGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGNvbnRleHRDb25maWc6IENvbnRleHRFbnZpcm9ubWVudENvbmZpZztcblxuICAvKipcbiAgICogTmV0d29yayBjb25maWd1cmF0aW9uIChETlMgem9uZXMsIGhvc3RuYW1lLCBsb2FkIGJhbGFuY2VyKVxuICAgKi9cbiAgbmV0d29yazogTmV0d29ya0NvbmZpZztcblxuICAvKipcbiAgICogTERBUCBOZXR3b3JrIExvYWQgQmFsYW5jZXIgZm9yIEEgYWxpYXMgcmVjb3JkXG4gICAqL1xuICBsZGFwTG9hZEJhbGFuY2VyOiBlbGJ2Mi5OZXR3b3JrTG9hZEJhbGFuY2VyO1xufVxuXG4vKipcbiAqIENESyBjb25zdHJ1Y3QgZm9yIFJvdXRlNTMgRE5TIHJlY29yZCBtYW5hZ2VtZW50IC0gTERBUCBvbmx5XG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZTUzIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgLyoqXG4gICAqIFRoZSBob3N0ZWQgem9uZSByZWZlcmVuY2VcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBob3N0ZWRab25lOiByb3V0ZTUzLklIb3N0ZWRab25lO1xuXG4gIC8qKlxuICAgKiBMREFQIEEgcmVjb3JkXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbGRhcEFSZWNvcmQ6IHJvdXRlNTMuQVJlY29yZDtcblxuICAvKipcbiAgICogRnVsbCBETlMgbmFtZSBmb3IgTERBUCBzZXJ2aWNlXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbGRhcEZxZG46IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUm91dGU1M1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIC8vIEltcG9ydCB0aGUgaG9zdGVkIHpvbmUgZnJvbSBiYXNlIGluZnJhc3RydWN0dXJlXG4gICAgdGhpcy5ob3N0ZWRab25lID0gcm91dGU1My5Ib3N0ZWRab25lLmZyb21Ib3N0ZWRab25lQXR0cmlidXRlcyh0aGlzLCAnSG9zdGVkWm9uZScsIHtcbiAgICAgIGhvc3RlZFpvbmVJZDogcHJvcHMubmV0d29yay5ob3N0ZWRab25lSWQsXG4gICAgICB6b25lTmFtZTogcHJvcHMubmV0d29yay5ob3N0ZWRab25lTmFtZVxuICAgIH0pO1xuXG4gICAgLy8gQ2FsY3VsYXRlIGZ1bGwgZG9tYWluIG5hbWVcbiAgICB0aGlzLmxkYXBGcWRuID0gYCR7cHJvcHMubmV0d29yay5ob3N0bmFtZX0uJHtwcm9wcy5uZXR3b3JrLmhvc3RlZFpvbmVOYW1lfWA7XG5cbiAgICAvLyBDcmVhdGUgQSByZWNvcmQgYWxpYXMgZm9yIExEQVAgKElQdjQgb25seSBmb3IgTkxCKVxuICAgIHRoaXMubGRhcEFSZWNvcmQgPSBuZXcgcm91dGU1My5BUmVjb3JkKHRoaXMsICdMZGFwQVJlY29yZCcsIHtcbiAgICAgIHpvbmU6IHRoaXMuaG9zdGVkWm9uZSxcbiAgICAgIHJlY29yZE5hbWU6IHByb3BzLm5ldHdvcmsuaG9zdG5hbWUsXG4gICAgICB0YXJnZXQ6IHJvdXRlNTMuUmVjb3JkVGFyZ2V0LmZyb21BbGlhcyhcbiAgICAgICAgbmV3IHRhcmdldHMuTG9hZEJhbGFuY2VyVGFyZ2V0KHByb3BzLmxkYXBMb2FkQmFsYW5jZXIpXG4gICAgICApLFxuICAgICAgY29tbWVudDogYExEQVAgSVB2NCBhbGlhcyByZWNvcmQgZm9yICR7cHJvcHMuZW52aXJvbm1lbnR9IGVudmlyb25tZW50YFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgTERBUCBzZXJ2aWNlIGhvc3RuYW1lXG4gICAqL1xuICBwdWJsaWMgZ2V0TGRhcEhvc3RuYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGRhcEZxZG47XG4gIH1cbn1cbiJdfQ==