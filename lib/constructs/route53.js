"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53 = void 0;
/**
 * Route53 LDAP Construct - DNS record management for LDAP service only
 *
 * This construct creates only the LDAP DNS records. Authentik DNS records
 * are handled by the Route53Authentik construct.
 */
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * CDK construct for Route53 DNS record management - LDAP only
 */
class Route53 extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Import the hosted zone from base infrastructure
        this.hostedZone = aws_cdk_lib_1.aws_route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {
            hostedZoneId: props.hostedZoneId,
            zoneName: props.hostedZoneName
        });
        // Calculate full domain name
        this.ldapFqdn = `${props.hostnameLdap}.${props.hostedZoneName}`;
        // Create A record alias for LDAP (IPv4 only for NLB)
        this.ldapARecord = new aws_cdk_lib_1.aws_route53.ARecord(this, 'LdapARecord', {
            zone: this.hostedZone,
            recordName: props.hostnameLdap,
            target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.LoadBalancerTarget(props.ldapLoadBalancer)),
            comment: `LDAP IPv4 alias record for ${props.environment} environment`
        });
    }
    /**
     * Get the LDAP service hostname
     */
    getLdapHostname() {
        return this.ldapFqdn;
    }
}
exports.Route53 = Route53;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGU1My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJvdXRlNTMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7O0dBS0c7QUFDSCwyQ0FBdUM7QUFDdkMsNkNBSXFCO0FBc0NyQjs7R0FFRztBQUNILE1BQWEsT0FBUSxTQUFRLHNCQUFTO0lBZ0JwQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW1CO1FBQzNELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxVQUFVLEdBQUcseUJBQU8sQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUNoRixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxjQUFjO1NBQy9CLENBQUMsQ0FBQztRQUVILDZCQUE2QjtRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsS0FBSyxDQUFDLFlBQVksSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFaEUscURBQXFEO1FBQ3JELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSx5QkFBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFO1lBQzFELElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtZQUNyQixVQUFVLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDOUIsTUFBTSxFQUFFLHlCQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FDcEMsSUFBSSxpQ0FBTyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUN2RDtZQUNELE9BQU8sRUFBRSw4QkFBOEIsS0FBSyxDQUFDLFdBQVcsY0FBYztTQUN2RSxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxlQUFlO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUE3Q0QsMEJBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSb3V0ZTUzIExEQVAgQ29uc3RydWN0IC0gRE5TIHJlY29yZCBtYW5hZ2VtZW50IGZvciBMREFQIHNlcnZpY2Ugb25seVxuICogXG4gKiBUaGlzIGNvbnN0cnVjdCBjcmVhdGVzIG9ubHkgdGhlIExEQVAgRE5TIHJlY29yZHMuIEF1dGhlbnRpayBETlMgcmVjb3Jkc1xuICogYXJlIGhhbmRsZWQgYnkgdGhlIFJvdXRlNTNBdXRoZW50aWsgY29uc3RydWN0LlxuICovXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7XG4gIGF3c19yb3V0ZTUzIGFzIHJvdXRlNTMsXG4gIGF3c19yb3V0ZTUzX3RhcmdldHMgYXMgdGFyZ2V0cyxcbiAgYXdzX2VsYXN0aWNsb2FkYmFsYW5jaW5ndjIgYXMgZWxidjJcbn0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHR5cGUgeyBBdXRoSW5mcmFFbnZpcm9ubWVudENvbmZpZyB9IGZyb20gJy4uL2Vudmlyb25tZW50LWNvbmZpZyc7XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgdGhlIFJvdXRlNTMgTERBUCBjb25zdHJ1Y3RcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZTUzUHJvcHMge1xuICAvKipcbiAgICogRW52aXJvbm1lbnQgbmFtZSAoZS5nLiAncHJvZCcsICdkZXYnLCBldGMuKVxuICAgKi9cbiAgZW52aXJvbm1lbnQ6IHN0cmluZztcblxuICAvKipcbiAgICogRW52aXJvbm1lbnQgY29uZmlndXJhdGlvblxuICAgKi9cbiAgY29uZmlnOiBBdXRoSW5mcmFFbnZpcm9ubWVudENvbmZpZztcblxuICAvKipcbiAgICogSG9zdGVkIFpvbmUgSUQgaW1wb3J0ZWQgZnJvbSBiYXNlIGluZnJhc3RydWN0dXJlXG4gICAqL1xuICBob3N0ZWRab25lSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogSG9zdGVkIFpvbmUgTmFtZSBpbXBvcnRlZCBmcm9tIGJhc2UgaW5mcmFzdHJ1Y3R1cmVcbiAgICovXG4gIGhvc3RlZFpvbmVOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEhvc3RuYW1lIGZvciBMREFQIHNlcnZpY2UgKGNyZWF0ZXMgQSBhbGlhcyByZWNvcmQpXG4gICAqL1xuICBob3N0bmFtZUxkYXA6IHN0cmluZztcblxuICAvKipcbiAgICogTERBUCBOZXR3b3JrIExvYWQgQmFsYW5jZXIgZm9yIEEgYWxpYXMgcmVjb3JkXG4gICAqL1xuICBsZGFwTG9hZEJhbGFuY2VyOiBlbGJ2Mi5OZXR3b3JrTG9hZEJhbGFuY2VyO1xufVxuXG4vKipcbiAqIENESyBjb25zdHJ1Y3QgZm9yIFJvdXRlNTMgRE5TIHJlY29yZCBtYW5hZ2VtZW50IC0gTERBUCBvbmx5XG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZTUzIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgLyoqXG4gICAqIFRoZSBob3N0ZWQgem9uZSByZWZlcmVuY2VcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBob3N0ZWRab25lOiByb3V0ZTUzLklIb3N0ZWRab25lO1xuXG4gIC8qKlxuICAgKiBMREFQIEEgcmVjb3JkXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbGRhcEFSZWNvcmQ6IHJvdXRlNTMuQVJlY29yZDtcblxuICAvKipcbiAgICogRnVsbCBETlMgbmFtZSBmb3IgTERBUCBzZXJ2aWNlXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbGRhcEZxZG46IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUm91dGU1M1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIC8vIEltcG9ydCB0aGUgaG9zdGVkIHpvbmUgZnJvbSBiYXNlIGluZnJhc3RydWN0dXJlXG4gICAgdGhpcy5ob3N0ZWRab25lID0gcm91dGU1My5Ib3N0ZWRab25lLmZyb21Ib3N0ZWRab25lQXR0cmlidXRlcyh0aGlzLCAnSG9zdGVkWm9uZScsIHtcbiAgICAgIGhvc3RlZFpvbmVJZDogcHJvcHMuaG9zdGVkWm9uZUlkLFxuICAgICAgem9uZU5hbWU6IHByb3BzLmhvc3RlZFpvbmVOYW1lXG4gICAgfSk7XG5cbiAgICAvLyBDYWxjdWxhdGUgZnVsbCBkb21haW4gbmFtZVxuICAgIHRoaXMubGRhcEZxZG4gPSBgJHtwcm9wcy5ob3N0bmFtZUxkYXB9LiR7cHJvcHMuaG9zdGVkWm9uZU5hbWV9YDtcblxuICAgIC8vIENyZWF0ZSBBIHJlY29yZCBhbGlhcyBmb3IgTERBUCAoSVB2NCBvbmx5IGZvciBOTEIpXG4gICAgdGhpcy5sZGFwQVJlY29yZCA9IG5ldyByb3V0ZTUzLkFSZWNvcmQodGhpcywgJ0xkYXBBUmVjb3JkJywge1xuICAgICAgem9uZTogdGhpcy5ob3N0ZWRab25lLFxuICAgICAgcmVjb3JkTmFtZTogcHJvcHMuaG9zdG5hbWVMZGFwLFxuICAgICAgdGFyZ2V0OiByb3V0ZTUzLlJlY29yZFRhcmdldC5mcm9tQWxpYXMoXG4gICAgICAgIG5ldyB0YXJnZXRzLkxvYWRCYWxhbmNlclRhcmdldChwcm9wcy5sZGFwTG9hZEJhbGFuY2VyKVxuICAgICAgKSxcbiAgICAgIGNvbW1lbnQ6IGBMREFQIElQdjQgYWxpYXMgcmVjb3JkIGZvciAke3Byb3BzLmVudmlyb25tZW50fSBlbnZpcm9ubWVudGBcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIExEQVAgc2VydmljZSBob3N0bmFtZVxuICAgKi9cbiAgcHVibGljIGdldExkYXBIb3N0bmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxkYXBGcWRuO1xuICB9XG59XG4iXX0=