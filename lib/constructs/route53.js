"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53 = void 0;
/**
 * Route53 LDAP Construct - DNS record management for LDAP service only
 *
 * This construct creates only the LDAP DNS records. Authentik DNS records
 * are handled by the Route53Authentik construct.
 */
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * CDK construct for Route53 DNS record management - LDAP only
 */
class Route53 extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Import the hosted zone from base infrastructure
        this.hostedZone = aws_cdk_lib_1.aws_route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {
            hostedZoneId: props.network.hostedZoneId,
            zoneName: props.network.hostedZoneName
        });
        // Calculate full domain name
        this.ldapFqdn = `${props.network.hostname}.${props.network.hostedZoneName}`;
        // Create A record alias for LDAP (IPv4 only for NLB)
        this.ldapARecord = new aws_cdk_lib_1.aws_route53.ARecord(this, 'LdapARecord', {
            zone: this.hostedZone,
            recordName: props.network.hostname,
            target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.LoadBalancerTarget(props.ldapLoadBalancer)),
            comment: `LDAP IPv4 alias record for ${props.environment} environment`
        });
    }
    /**
     * Get the LDAP service hostname
     */
    getLdapHostname() {
        return this.ldapFqdn;
    }
}
exports.Route53 = Route53;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGU1My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJvdXRlNTMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7O0dBS0c7QUFDSCwyQ0FBdUM7QUFDdkMsNkNBSXFCO0FBNkJyQjs7R0FFRztBQUNILE1BQWEsT0FBUSxTQUFRLHNCQUFTO0lBZ0JwQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW1CO1FBQzNELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxVQUFVLEdBQUcseUJBQU8sQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUNoRixZQUFZLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZO1lBQ3hDLFFBQVEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWM7U0FDdkMsQ0FBQyxDQUFDO1FBRUgsNkJBQTZCO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRTVFLHFEQUFxRDtRQUNyRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUkseUJBQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUMxRCxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDckIsVUFBVSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUTtZQUNsQyxNQUFNLEVBQUUseUJBQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUNwQyxJQUFJLGlDQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQ3ZEO1lBQ0QsT0FBTyxFQUFFLDhCQUE4QixLQUFLLENBQUMsV0FBVyxjQUFjO1NBQ3ZFLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLGVBQWU7UUFDcEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQTdDRCwwQkE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJvdXRlNTMgTERBUCBDb25zdHJ1Y3QgLSBETlMgcmVjb3JkIG1hbmFnZW1lbnQgZm9yIExEQVAgc2VydmljZSBvbmx5XG4gKiBcbiAqIFRoaXMgY29uc3RydWN0IGNyZWF0ZXMgb25seSB0aGUgTERBUCBETlMgcmVjb3Jkcy4gQXV0aGVudGlrIEROUyByZWNvcmRzXG4gKiBhcmUgaGFuZGxlZCBieSB0aGUgUm91dGU1M0F1dGhlbnRpayBjb25zdHJ1Y3QuXG4gKi9cbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHtcbiAgYXdzX3JvdXRlNTMgYXMgcm91dGU1MyxcbiAgYXdzX3JvdXRlNTNfdGFyZ2V0cyBhcyB0YXJnZXRzLFxuICBhd3NfZWxhc3RpY2xvYWRiYWxhbmNpbmd2MiBhcyBlbGJ2MlxufSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgdHlwZSB7IEF1dGhJbmZyYUVudmlyb25tZW50Q29uZmlnIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQtY29uZmlnJztcbmltcG9ydCB0eXBlIHsgTmV0d29ya0NvbmZpZyB9IGZyb20gJy4uL2NvbnN0cnVjdC1jb25maWdzJztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciB0aGUgUm91dGU1MyBMREFQIGNvbnN0cnVjdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlNTNQcm9wcyB7XG4gIC8qKlxuICAgKiBFbnZpcm9ubWVudCBuYW1lIChlLmcuICdwcm9kJywgJ2RldicsIGV0Yy4pXG4gICAqL1xuICBlbnZpcm9ubWVudDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBFbnZpcm9ubWVudCBjb25maWd1cmF0aW9uXG4gICAqL1xuICBjb25maWc6IEF1dGhJbmZyYUVudmlyb25tZW50Q29uZmlnO1xuXG4gIC8qKlxuICAgKiBOZXR3b3JrIGNvbmZpZ3VyYXRpb24gKEROUyB6b25lcywgaG9zdG5hbWUsIGxvYWQgYmFsYW5jZXIpXG4gICAqL1xuICBuZXR3b3JrOiBOZXR3b3JrQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBMREFQIE5ldHdvcmsgTG9hZCBCYWxhbmNlciBmb3IgQSBhbGlhcyByZWNvcmRcbiAgICovXG4gIGxkYXBMb2FkQmFsYW5jZXI6IGVsYnYyLk5ldHdvcmtMb2FkQmFsYW5jZXI7XG59XG5cbi8qKlxuICogQ0RLIGNvbnN0cnVjdCBmb3IgUm91dGU1MyBETlMgcmVjb3JkIG1hbmFnZW1lbnQgLSBMREFQIG9ubHlcbiAqL1xuZXhwb3J0IGNsYXNzIFJvdXRlNTMgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAvKipcbiAgICogVGhlIGhvc3RlZCB6b25lIHJlZmVyZW5jZVxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGhvc3RlZFpvbmU6IHJvdXRlNTMuSUhvc3RlZFpvbmU7XG5cbiAgLyoqXG4gICAqIExEQVAgQSByZWNvcmRcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBsZGFwQVJlY29yZDogcm91dGU1My5BUmVjb3JkO1xuXG4gIC8qKlxuICAgKiBGdWxsIEROUyBuYW1lIGZvciBMREFQIHNlcnZpY2VcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBsZGFwRnFkbjogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBSb3V0ZTUzUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgLy8gSW1wb3J0IHRoZSBob3N0ZWQgem9uZSBmcm9tIGJhc2UgaW5mcmFzdHJ1Y3R1cmVcbiAgICB0aGlzLmhvc3RlZFpvbmUgPSByb3V0ZTUzLkhvc3RlZFpvbmUuZnJvbUhvc3RlZFpvbmVBdHRyaWJ1dGVzKHRoaXMsICdIb3N0ZWRab25lJywge1xuICAgICAgaG9zdGVkWm9uZUlkOiBwcm9wcy5uZXR3b3JrLmhvc3RlZFpvbmVJZCxcbiAgICAgIHpvbmVOYW1lOiBwcm9wcy5uZXR3b3JrLmhvc3RlZFpvbmVOYW1lXG4gICAgfSk7XG5cbiAgICAvLyBDYWxjdWxhdGUgZnVsbCBkb21haW4gbmFtZVxuICAgIHRoaXMubGRhcEZxZG4gPSBgJHtwcm9wcy5uZXR3b3JrLmhvc3RuYW1lfS4ke3Byb3BzLm5ldHdvcmsuaG9zdGVkWm9uZU5hbWV9YDtcblxuICAgIC8vIENyZWF0ZSBBIHJlY29yZCBhbGlhcyBmb3IgTERBUCAoSVB2NCBvbmx5IGZvciBOTEIpXG4gICAgdGhpcy5sZGFwQVJlY29yZCA9IG5ldyByb3V0ZTUzLkFSZWNvcmQodGhpcywgJ0xkYXBBUmVjb3JkJywge1xuICAgICAgem9uZTogdGhpcy5ob3N0ZWRab25lLFxuICAgICAgcmVjb3JkTmFtZTogcHJvcHMubmV0d29yay5ob3N0bmFtZSxcbiAgICAgIHRhcmdldDogcm91dGU1My5SZWNvcmRUYXJnZXQuZnJvbUFsaWFzKFxuICAgICAgICBuZXcgdGFyZ2V0cy5Mb2FkQmFsYW5jZXJUYXJnZXQocHJvcHMubGRhcExvYWRCYWxhbmNlcilcbiAgICAgICksXG4gICAgICBjb21tZW50OiBgTERBUCBJUHY0IGFsaWFzIHJlY29yZCBmb3IgJHtwcm9wcy5lbnZpcm9ubWVudH0gZW52aXJvbm1lbnRgXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBMREFQIHNlcnZpY2UgaG9zdG5hbWVcbiAgICovXG4gIHB1YmxpYyBnZXRMZGFwSG9zdG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sZGFwRnFkbjtcbiAgfVxufVxuIl19