"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53 = void 0;
/**
 * Route53 Construct - DNS record management for Authentik and LDAP services
 */
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * CDK construct for Route53 DNS record management
 */
class Route53 extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Import the hosted zone from base infrastructure
        this.hostedZone = aws_cdk_lib_1.aws_route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {
            hostedZoneId: props.hostedZoneId,
            zoneName: props.hostedZoneName
        });
        // Calculate full domain names
        this.authentikFqdn = `${props.hostnameAuthentik}.${props.hostedZoneName}`;
        this.ldapFqdn = `${props.hostnameLdap}.${props.hostedZoneName}`;
        // Create A record alias for Authentik (IPv4)
        this.authentikARecord = new aws_cdk_lib_1.aws_route53.ARecord(this, 'AuthentikARecord', {
            zone: this.hostedZone,
            recordName: props.hostnameAuthentik,
            target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.LoadBalancerTarget(props.authentikLoadBalancer)),
            comment: `Authentik IPv4 alias record for ${props.environment} environment`
        });
        // Create AAAA record alias for Authentik (IPv6)
        this.authentikAAAARecord = new aws_cdk_lib_1.aws_route53.AaaaRecord(this, 'AuthentikAAAARecord', {
            zone: this.hostedZone,
            recordName: props.hostnameAuthentik,
            target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.LoadBalancerTarget(props.authentikLoadBalancer)),
            comment: `Authentik IPv6 alias record for ${props.environment} environment`
        });
        // Create A record alias for LDAP (IPv4 only for NLB)
        this.ldapARecord = new aws_cdk_lib_1.aws_route53.ARecord(this, 'LdapARecord', {
            zone: this.hostedZone,
            recordName: props.hostnameLdap,
            target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.LoadBalancerTarget(props.ldapLoadBalancer)),
            comment: `LDAP IPv4 alias record for ${props.environment} environment`
        });
    }
    /**
     * Get the Authentik service URL
     */
    getAuthentikUrl() {
        return `https://${this.authentikFqdn}`;
    }
    /**
     * Get the LDAP service hostname
     */
    getLdapHostname() {
        return this.ldapFqdn;
    }
}
exports.Route53 = Route53;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGU1My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJvdXRlNTMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSCwyQ0FBdUM7QUFDdkMsNkNBS3FCO0FBZ0RyQjs7R0FFRztBQUNILE1BQWEsT0FBUSxTQUFRLHNCQUFTO0lBK0JwQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW1CO1FBQzNELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxVQUFVLEdBQUcseUJBQU8sQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUNoRixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxjQUFjO1NBQy9CLENBQUMsQ0FBQztRQUVILDhCQUE4QjtRQUM5QixJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixJQUFJLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUMxRSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsS0FBSyxDQUFDLFlBQVksSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFaEUsNkNBQTZDO1FBQzdDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLHlCQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRTtZQUNwRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDckIsVUFBVSxFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDbkMsTUFBTSxFQUFFLHlCQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FDcEMsSUFBSSxpQ0FBTyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUM1RDtZQUNELE9BQU8sRUFBRSxtQ0FBbUMsS0FBSyxDQUFDLFdBQVcsY0FBYztTQUM1RSxDQUFDLENBQUM7UUFFSCxnREFBZ0Q7UUFDaEQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUkseUJBQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLHFCQUFxQixFQUFFO1lBQzdFLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtZQUNyQixVQUFVLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUNuQyxNQUFNLEVBQUUseUJBQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUNwQyxJQUFJLGlDQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQzVEO1lBQ0QsT0FBTyxFQUFFLG1DQUFtQyxLQUFLLENBQUMsV0FBVyxjQUFjO1NBQzVFLENBQUMsQ0FBQztRQUVILHFEQUFxRDtRQUNyRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUkseUJBQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUMxRCxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDckIsVUFBVSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQzlCLE1BQU0sRUFBRSx5QkFBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQ3BDLElBQUksaUNBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FDdkQ7WUFDRCxPQUFPLEVBQUUsOEJBQThCLEtBQUssQ0FBQyxXQUFXLGNBQWM7U0FDdkUsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksZUFBZTtRQUNwQixPQUFPLFdBQVcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7T0FFRztJQUNJLGVBQWU7UUFDcEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQXhGRCwwQkF3RkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJvdXRlNTMgQ29uc3RydWN0IC0gRE5TIHJlY29yZCBtYW5hZ2VtZW50IGZvciBBdXRoZW50aWsgYW5kIExEQVAgc2VydmljZXNcbiAqL1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQge1xuICBhd3Nfcm91dGU1MyBhcyByb3V0ZTUzLFxuICBhd3Nfcm91dGU1M190YXJnZXRzIGFzIHRhcmdldHMsXG4gIGF3c19lbGFzdGljbG9hZGJhbGFuY2luZ3YyIGFzIGVsYnYyLFxuICBGblxufSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgdHlwZSB7IEF1dGhJbmZyYUVudmlyb25tZW50Q29uZmlnIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQtY29uZmlnJztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciB0aGUgUm91dGU1MyBjb25zdHJ1Y3RcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZTUzUHJvcHMge1xuICAvKipcbiAgICogRW52aXJvbm1lbnQgbmFtZSAoZS5nLiAncHJvZCcsICdkZXYnLCBldGMuKVxuICAgKi9cbiAgZW52aXJvbm1lbnQ6IHN0cmluZztcblxuICAvKipcbiAgICogRW52aXJvbm1lbnQgY29uZmlndXJhdGlvblxuICAgKi9cbiAgY29uZmlnOiBBdXRoSW5mcmFFbnZpcm9ubWVudENvbmZpZztcblxuICAvKipcbiAgICogSG9zdGVkIFpvbmUgSUQgaW1wb3J0ZWQgZnJvbSBiYXNlIGluZnJhc3RydWN0dXJlXG4gICAqL1xuICBob3N0ZWRab25lSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogSG9zdGVkIFpvbmUgTmFtZSBpbXBvcnRlZCBmcm9tIGJhc2UgaW5mcmFzdHJ1Y3R1cmVcbiAgICovXG4gIGhvc3RlZFpvbmVOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEhvc3RuYW1lIGZvciBBdXRoZW50aWsgc2VydmljZSAoY3JlYXRlcyBBL0FBQUEgYWxpYXMgcmVjb3JkcylcbiAgICovXG4gIGhvc3RuYW1lQXV0aGVudGlrOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEhvc3RuYW1lIGZvciBMREFQIHNlcnZpY2UgKGNyZWF0ZXMgQSBhbGlhcyByZWNvcmQpXG4gICAqL1xuICBob3N0bmFtZUxkYXA6IHN0cmluZztcblxuICAvKipcbiAgICogQXV0aGVudGlrIEFwcGxpY2F0aW9uIExvYWQgQmFsYW5jZXIgZm9yIEEvQUFBQSBhbGlhcyByZWNvcmRzXG4gICAqL1xuICBhdXRoZW50aWtMb2FkQmFsYW5jZXI6IGVsYnYyLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyO1xuXG4gIC8qKlxuICAgKiBMREFQIE5ldHdvcmsgTG9hZCBCYWxhbmNlciBmb3IgQSBhbGlhcyByZWNvcmRcbiAgICovXG4gIGxkYXBMb2FkQmFsYW5jZXI6IGVsYnYyLk5ldHdvcmtMb2FkQmFsYW5jZXI7XG59XG5cbi8qKlxuICogQ0RLIGNvbnN0cnVjdCBmb3IgUm91dGU1MyBETlMgcmVjb3JkIG1hbmFnZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIFJvdXRlNTMgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAvKipcbiAgICogVGhlIGhvc3RlZCB6b25lIHJlZmVyZW5jZVxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGhvc3RlZFpvbmU6IHJvdXRlNTMuSUhvc3RlZFpvbmU7XG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpayBBIHJlY29yZFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGF1dGhlbnRpa0FSZWNvcmQ6IHJvdXRlNTMuQVJlY29yZDtcblxuICAvKipcbiAgICogQXV0aGVudGlrIEFBQUEgcmVjb3JkXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgYXV0aGVudGlrQUFBQVJlY29yZDogcm91dGU1My5BYWFhUmVjb3JkO1xuXG4gIC8qKlxuICAgKiBMREFQIEEgcmVjb3JkXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbGRhcEFSZWNvcmQ6IHJvdXRlNTMuQVJlY29yZDtcblxuICAvKipcbiAgICogRnVsbCBETlMgbmFtZSBmb3IgQXV0aGVudGlrIHNlcnZpY2VcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhdXRoZW50aWtGcWRuOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZ1bGwgRE5TIG5hbWUgZm9yIExEQVAgc2VydmljZVxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGxkYXBGcWRuOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFJvdXRlNTNQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAvLyBJbXBvcnQgdGhlIGhvc3RlZCB6b25lIGZyb20gYmFzZSBpbmZyYXN0cnVjdHVyZVxuICAgIHRoaXMuaG9zdGVkWm9uZSA9IHJvdXRlNTMuSG9zdGVkWm9uZS5mcm9tSG9zdGVkWm9uZUF0dHJpYnV0ZXModGhpcywgJ0hvc3RlZFpvbmUnLCB7XG4gICAgICBob3N0ZWRab25lSWQ6IHByb3BzLmhvc3RlZFpvbmVJZCxcbiAgICAgIHpvbmVOYW1lOiBwcm9wcy5ob3N0ZWRab25lTmFtZVxuICAgIH0pO1xuXG4gICAgLy8gQ2FsY3VsYXRlIGZ1bGwgZG9tYWluIG5hbWVzXG4gICAgdGhpcy5hdXRoZW50aWtGcWRuID0gYCR7cHJvcHMuaG9zdG5hbWVBdXRoZW50aWt9LiR7cHJvcHMuaG9zdGVkWm9uZU5hbWV9YDtcbiAgICB0aGlzLmxkYXBGcWRuID0gYCR7cHJvcHMuaG9zdG5hbWVMZGFwfS4ke3Byb3BzLmhvc3RlZFpvbmVOYW1lfWA7XG5cbiAgICAvLyBDcmVhdGUgQSByZWNvcmQgYWxpYXMgZm9yIEF1dGhlbnRpayAoSVB2NClcbiAgICB0aGlzLmF1dGhlbnRpa0FSZWNvcmQgPSBuZXcgcm91dGU1My5BUmVjb3JkKHRoaXMsICdBdXRoZW50aWtBUmVjb3JkJywge1xuICAgICAgem9uZTogdGhpcy5ob3N0ZWRab25lLFxuICAgICAgcmVjb3JkTmFtZTogcHJvcHMuaG9zdG5hbWVBdXRoZW50aWssXG4gICAgICB0YXJnZXQ6IHJvdXRlNTMuUmVjb3JkVGFyZ2V0LmZyb21BbGlhcyhcbiAgICAgICAgbmV3IHRhcmdldHMuTG9hZEJhbGFuY2VyVGFyZ2V0KHByb3BzLmF1dGhlbnRpa0xvYWRCYWxhbmNlcilcbiAgICAgICksXG4gICAgICBjb21tZW50OiBgQXV0aGVudGlrIElQdjQgYWxpYXMgcmVjb3JkIGZvciAke3Byb3BzLmVudmlyb25tZW50fSBlbnZpcm9ubWVudGBcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBBQUFBIHJlY29yZCBhbGlhcyBmb3IgQXV0aGVudGlrIChJUHY2KVxuICAgIHRoaXMuYXV0aGVudGlrQUFBQVJlY29yZCA9IG5ldyByb3V0ZTUzLkFhYWFSZWNvcmQodGhpcywgJ0F1dGhlbnRpa0FBQUFSZWNvcmQnLCB7XG4gICAgICB6b25lOiB0aGlzLmhvc3RlZFpvbmUsXG4gICAgICByZWNvcmROYW1lOiBwcm9wcy5ob3N0bmFtZUF1dGhlbnRpayxcbiAgICAgIHRhcmdldDogcm91dGU1My5SZWNvcmRUYXJnZXQuZnJvbUFsaWFzKFxuICAgICAgICBuZXcgdGFyZ2V0cy5Mb2FkQmFsYW5jZXJUYXJnZXQocHJvcHMuYXV0aGVudGlrTG9hZEJhbGFuY2VyKVxuICAgICAgKSxcbiAgICAgIGNvbW1lbnQ6IGBBdXRoZW50aWsgSVB2NiBhbGlhcyByZWNvcmQgZm9yICR7cHJvcHMuZW52aXJvbm1lbnR9IGVudmlyb25tZW50YFxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIEEgcmVjb3JkIGFsaWFzIGZvciBMREFQIChJUHY0IG9ubHkgZm9yIE5MQilcbiAgICB0aGlzLmxkYXBBUmVjb3JkID0gbmV3IHJvdXRlNTMuQVJlY29yZCh0aGlzLCAnTGRhcEFSZWNvcmQnLCB7XG4gICAgICB6b25lOiB0aGlzLmhvc3RlZFpvbmUsXG4gICAgICByZWNvcmROYW1lOiBwcm9wcy5ob3N0bmFtZUxkYXAsXG4gICAgICB0YXJnZXQ6IHJvdXRlNTMuUmVjb3JkVGFyZ2V0LmZyb21BbGlhcyhcbiAgICAgICAgbmV3IHRhcmdldHMuTG9hZEJhbGFuY2VyVGFyZ2V0KHByb3BzLmxkYXBMb2FkQmFsYW5jZXIpXG4gICAgICApLFxuICAgICAgY29tbWVudDogYExEQVAgSVB2NCBhbGlhcyByZWNvcmQgZm9yICR7cHJvcHMuZW52aXJvbm1lbnR9IGVudmlyb25tZW50YFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgQXV0aGVudGlrIHNlcnZpY2UgVVJMXG4gICAqL1xuICBwdWJsaWMgZ2V0QXV0aGVudGlrVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBodHRwczovLyR7dGhpcy5hdXRoZW50aWtGcWRufWA7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBMREFQIHNlcnZpY2UgaG9zdG5hbWVcbiAgICovXG4gIHB1YmxpYyBnZXRMZGFwSG9zdG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sZGFwRnFkbjtcbiAgfVxufVxuIl19