"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53Authentik = void 0;
/**
 * Route53 Authentik Construct - DNS record management for Authentik service only
 *
 * This construct creates only the Authentik DNS records, allowing the FQDN to be
 * available for use by other constructs (like LDAP token retriever) before the
 * LDAP construct is created.
 */
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * CDK construct for Route53 DNS record management - Authentik only
 */
class Route53Authentik extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Import the hosted zone from base infrastructure
        this.hostedZone = aws_cdk_lib_1.aws_route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {
            hostedZoneId: props.network.hostedZoneId,
            zoneName: props.network.hostedZoneName
        });
        // Calculate full domain name
        this.authentikFqdn = `${props.network.hostname}.${props.network.hostedZoneName}`;
        // Create A record alias for Authentik (IPv4)
        this.authentikARecord = new aws_cdk_lib_1.aws_route53.ARecord(this, 'AuthentikARecord', {
            zone: this.hostedZone,
            recordName: props.network.hostname,
            target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.LoadBalancerTarget(props.authentikLoadBalancer)),
            comment: `Authentik IPv4 alias record for ${props.environment} environment`
        });
        // Create AAAA record alias for Authentik (IPv6)
        this.authentikAAAARecord = new aws_cdk_lib_1.aws_route53.AaaaRecord(this, 'AuthentikAAAARecord', {
            zone: this.hostedZone,
            recordName: props.network.hostname,
            target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.LoadBalancerTarget(props.authentikLoadBalancer)),
            comment: `Authentik IPv6 alias record for ${props.environment} environment`
        });
    }
    /**
     * Get the Authentik service URL
     */
    getAuthentikUrl() {
        return `https://${this.authentikFqdn}`;
    }
}
exports.Route53Authentik = Route53Authentik;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGU1My1hdXRoZW50aWsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyb3V0ZTUzLWF1dGhlbnRpay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7Ozs7O0dBTUc7QUFDSCwyQ0FBdUM7QUFDdkMsNkNBSXFCO0FBNkJyQjs7R0FFRztBQUNILE1BQWEsZ0JBQWlCLFNBQVEsc0JBQVM7SUFxQjdDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBNEI7UUFDcEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixrREFBa0Q7UUFDbEQsSUFBSSxDQUFDLFVBQVUsR0FBRyx5QkFBTyxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQ2hGLFlBQVksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVk7WUFDeEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsY0FBYztTQUN2QyxDQUFDLENBQUM7UUFFSCw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFakYsNkNBQTZDO1FBQzdDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLHlCQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRTtZQUNwRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDckIsVUFBVSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUTtZQUNsQyxNQUFNLEVBQUUseUJBQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUNwQyxJQUFJLGlDQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQzVEO1lBQ0QsT0FBTyxFQUFFLG1DQUFtQyxLQUFLLENBQUMsV0FBVyxjQUFjO1NBQzVFLENBQUMsQ0FBQztRQUVILGdEQUFnRDtRQUNoRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSx5QkFBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEVBQUU7WUFDN0UsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVE7WUFDbEMsTUFBTSxFQUFFLHlCQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FDcEMsSUFBSSxpQ0FBTyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUM1RDtZQUNELE9BQU8sRUFBRSxtQ0FBbUMsS0FBSyxDQUFDLFdBQVcsY0FBYztTQUM1RSxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxlQUFlO1FBQ3BCLE9BQU8sV0FBVyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDekMsQ0FBQztDQUNGO0FBNURELDRDQTREQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUm91dGU1MyBBdXRoZW50aWsgQ29uc3RydWN0IC0gRE5TIHJlY29yZCBtYW5hZ2VtZW50IGZvciBBdXRoZW50aWsgc2VydmljZSBvbmx5XG4gKiBcbiAqIFRoaXMgY29uc3RydWN0IGNyZWF0ZXMgb25seSB0aGUgQXV0aGVudGlrIEROUyByZWNvcmRzLCBhbGxvd2luZyB0aGUgRlFETiB0byBiZVxuICogYXZhaWxhYmxlIGZvciB1c2UgYnkgb3RoZXIgY29uc3RydWN0cyAobGlrZSBMREFQIHRva2VuIHJldHJpZXZlcikgYmVmb3JlIHRoZVxuICogTERBUCBjb25zdHJ1Y3QgaXMgY3JlYXRlZC5cbiAqL1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQge1xuICBhd3Nfcm91dGU1MyBhcyByb3V0ZTUzLFxuICBhd3Nfcm91dGU1M190YXJnZXRzIGFzIHRhcmdldHMsXG4gIGF3c19lbGFzdGljbG9hZGJhbGFuY2luZ3YyIGFzIGVsYnYyXG59IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB0eXBlIHsgQ29udGV4dEVudmlyb25tZW50Q29uZmlnIH0gZnJvbSAnLi4vc3RhY2stY29uZmlnJztcbmltcG9ydCB0eXBlIHsgTmV0d29ya0NvbmZpZyB9IGZyb20gJy4uL2NvbnN0cnVjdC1jb25maWdzJztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciB0aGUgUm91dGU1MyBBdXRoZW50aWsgY29uc3RydWN0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGU1M0F1dGhlbnRpa1Byb3BzIHtcbiAgLyoqXG4gICAqIEVudmlyb25tZW50IG5hbWUgKGUuZy4gJ3Byb2QnLCAnZGV2JywgZXRjLilcbiAgICovXG4gIGVudmlyb25tZW50OiAncHJvZCcgfCAnZGV2LXRlc3QnO1xuXG4gIC8qKlxuICAgKiBFbnZpcm9ubWVudCBjb25maWd1cmF0aW9uXG4gICAqL1xuICBjb250ZXh0Q29uZmlnOiBDb250ZXh0RW52aXJvbm1lbnRDb25maWc7XG5cbiAgLyoqXG4gICAqIE5ldHdvcmsgY29uZmlndXJhdGlvbiAoRE5TIHpvbmVzLCBob3N0bmFtZSwgbG9hZCBiYWxhbmNlcilcbiAgICovXG4gIG5ldHdvcms6IE5ldHdvcmtDb25maWc7XG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpayBBcHBsaWNhdGlvbiBMb2FkIEJhbGFuY2VyIGZvciBBL0FBQUEgYWxpYXMgcmVjb3Jkc1xuICAgKi9cbiAgYXV0aGVudGlrTG9hZEJhbGFuY2VyOiBlbGJ2Mi5BcHBsaWNhdGlvbkxvYWRCYWxhbmNlcjtcbn1cblxuLyoqXG4gKiBDREsgY29uc3RydWN0IGZvciBSb3V0ZTUzIEROUyByZWNvcmQgbWFuYWdlbWVudCAtIEF1dGhlbnRpayBvbmx5XG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZTUzQXV0aGVudGlrIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgLyoqXG4gICAqIFRoZSBob3N0ZWQgem9uZSByZWZlcmVuY2VcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBob3N0ZWRab25lOiByb3V0ZTUzLklIb3N0ZWRab25lO1xuXG4gIC8qKlxuICAgKiBBdXRoZW50aWsgQSByZWNvcmRcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhdXRoZW50aWtBUmVjb3JkOiByb3V0ZTUzLkFSZWNvcmQ7XG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpayBBQUFBIHJlY29yZFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGF1dGhlbnRpa0FBQUFSZWNvcmQ6IHJvdXRlNTMuQWFhYVJlY29yZDtcblxuICAvKipcbiAgICogRnVsbCBETlMgbmFtZSBmb3IgQXV0aGVudGlrIHNlcnZpY2VcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhdXRoZW50aWtGcWRuOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFJvdXRlNTNBdXRoZW50aWtQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAvLyBJbXBvcnQgdGhlIGhvc3RlZCB6b25lIGZyb20gYmFzZSBpbmZyYXN0cnVjdHVyZVxuICAgIHRoaXMuaG9zdGVkWm9uZSA9IHJvdXRlNTMuSG9zdGVkWm9uZS5mcm9tSG9zdGVkWm9uZUF0dHJpYnV0ZXModGhpcywgJ0hvc3RlZFpvbmUnLCB7XG4gICAgICBob3N0ZWRab25lSWQ6IHByb3BzLm5ldHdvcmsuaG9zdGVkWm9uZUlkLFxuICAgICAgem9uZU5hbWU6IHByb3BzLm5ldHdvcmsuaG9zdGVkWm9uZU5hbWVcbiAgICB9KTtcblxuICAgIC8vIENhbGN1bGF0ZSBmdWxsIGRvbWFpbiBuYW1lXG4gICAgdGhpcy5hdXRoZW50aWtGcWRuID0gYCR7cHJvcHMubmV0d29yay5ob3N0bmFtZX0uJHtwcm9wcy5uZXR3b3JrLmhvc3RlZFpvbmVOYW1lfWA7XG5cbiAgICAvLyBDcmVhdGUgQSByZWNvcmQgYWxpYXMgZm9yIEF1dGhlbnRpayAoSVB2NClcbiAgICB0aGlzLmF1dGhlbnRpa0FSZWNvcmQgPSBuZXcgcm91dGU1My5BUmVjb3JkKHRoaXMsICdBdXRoZW50aWtBUmVjb3JkJywge1xuICAgICAgem9uZTogdGhpcy5ob3N0ZWRab25lLFxuICAgICAgcmVjb3JkTmFtZTogcHJvcHMubmV0d29yay5ob3N0bmFtZSxcbiAgICAgIHRhcmdldDogcm91dGU1My5SZWNvcmRUYXJnZXQuZnJvbUFsaWFzKFxuICAgICAgICBuZXcgdGFyZ2V0cy5Mb2FkQmFsYW5jZXJUYXJnZXQocHJvcHMuYXV0aGVudGlrTG9hZEJhbGFuY2VyKVxuICAgICAgKSxcbiAgICAgIGNvbW1lbnQ6IGBBdXRoZW50aWsgSVB2NCBhbGlhcyByZWNvcmQgZm9yICR7cHJvcHMuZW52aXJvbm1lbnR9IGVudmlyb25tZW50YFxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIEFBQUEgcmVjb3JkIGFsaWFzIGZvciBBdXRoZW50aWsgKElQdjYpXG4gICAgdGhpcy5hdXRoZW50aWtBQUFBUmVjb3JkID0gbmV3IHJvdXRlNTMuQWFhYVJlY29yZCh0aGlzLCAnQXV0aGVudGlrQUFBQVJlY29yZCcsIHtcbiAgICAgIHpvbmU6IHRoaXMuaG9zdGVkWm9uZSxcbiAgICAgIHJlY29yZE5hbWU6IHByb3BzLm5ldHdvcmsuaG9zdG5hbWUsXG4gICAgICB0YXJnZXQ6IHJvdXRlNTMuUmVjb3JkVGFyZ2V0LmZyb21BbGlhcyhcbiAgICAgICAgbmV3IHRhcmdldHMuTG9hZEJhbGFuY2VyVGFyZ2V0KHByb3BzLmF1dGhlbnRpa0xvYWRCYWxhbmNlcilcbiAgICAgICksXG4gICAgICBjb21tZW50OiBgQXV0aGVudGlrIElQdjYgYWxpYXMgcmVjb3JkIGZvciAke3Byb3BzLmVudmlyb25tZW50fSBlbnZpcm9ubWVudGBcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIEF1dGhlbnRpayBzZXJ2aWNlIFVSTFxuICAgKi9cbiAgcHVibGljIGdldEF1dGhlbnRpa1VybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgaHR0cHM6Ly8ke3RoaXMuYXV0aGVudGlrRnFkbn1gO1xuICB9XG59XG4iXX0=