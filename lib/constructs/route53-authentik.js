"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route53Authentik = void 0;
/**
 * Route53 Authentik Construct - DNS record management for Authentik service only
 *
 * This construct creates only the Authentik DNS records, allowing the FQDN to be
 * available for use by other constructs (like LDAP token retriever) before the
 * LDAP construct is created.
 */
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * CDK construct for Route53 DNS record management - Authentik only
 */
class Route53Authentik extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Import the hosted zone from base infrastructure
        this.hostedZone = aws_cdk_lib_1.aws_route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {
            hostedZoneId: props.network.hostedZoneId,
            zoneName: props.network.hostedZoneName
        });
        // Calculate full domain name
        this.authentikFqdn = `${props.network.hostname}.${props.network.hostedZoneName}`;
        // Create A record alias for Authentik (IPv4)
        this.authentikARecord = new aws_cdk_lib_1.aws_route53.ARecord(this, 'AuthentikARecord', {
            zone: this.hostedZone,
            recordName: props.network.hostname,
            target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.LoadBalancerTarget(props.authentikLoadBalancer)),
            comment: `Authentik IPv4 alias record for ${props.environment} environment`
        });
        // Create AAAA record alias for Authentik (IPv6)
        this.authentikAAAARecord = new aws_cdk_lib_1.aws_route53.AaaaRecord(this, 'AuthentikAAAARecord', {
            zone: this.hostedZone,
            recordName: props.network.hostname,
            target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.LoadBalancerTarget(props.authentikLoadBalancer)),
            comment: `Authentik IPv6 alias record for ${props.environment} environment`
        });
    }
    /**
     * Get the Authentik service URL
     */
    getAuthentikUrl() {
        return `https://${this.authentikFqdn}`;
    }
}
exports.Route53Authentik = Route53Authentik;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGU1My1hdXRoZW50aWsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyb3V0ZTUzLWF1dGhlbnRpay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7Ozs7O0dBTUc7QUFDSCwyQ0FBdUM7QUFDdkMsNkNBSXFCO0FBNkJyQjs7R0FFRztBQUNILE1BQWEsZ0JBQWlCLFNBQVEsc0JBQVM7SUFxQjdDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBNEI7UUFDcEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixrREFBa0Q7UUFDbEQsSUFBSSxDQUFDLFVBQVUsR0FBRyx5QkFBTyxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQ2hGLFlBQVksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVk7WUFDeEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsY0FBYztTQUN2QyxDQUFDLENBQUM7UUFFSCw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFakYsNkNBQTZDO1FBQzdDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLHlCQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRTtZQUNwRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDckIsVUFBVSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUTtZQUNsQyxNQUFNLEVBQUUseUJBQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUNwQyxJQUFJLGlDQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQzVEO1lBQ0QsT0FBTyxFQUFFLG1DQUFtQyxLQUFLLENBQUMsV0FBVyxjQUFjO1NBQzVFLENBQUMsQ0FBQztRQUVILGdEQUFnRDtRQUNoRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSx5QkFBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEVBQUU7WUFDN0UsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVE7WUFDbEMsTUFBTSxFQUFFLHlCQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FDcEMsSUFBSSxpQ0FBTyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUM1RDtZQUNELE9BQU8sRUFBRSxtQ0FBbUMsS0FBSyxDQUFDLFdBQVcsY0FBYztTQUM1RSxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxlQUFlO1FBQ3BCLE9BQU8sV0FBVyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDekMsQ0FBQztDQUNGO0FBNURELDRDQTREQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUm91dGU1MyBBdXRoZW50aWsgQ29uc3RydWN0IC0gRE5TIHJlY29yZCBtYW5hZ2VtZW50IGZvciBBdXRoZW50aWsgc2VydmljZSBvbmx5XG4gKiBcbiAqIFRoaXMgY29uc3RydWN0IGNyZWF0ZXMgb25seSB0aGUgQXV0aGVudGlrIEROUyByZWNvcmRzLCBhbGxvd2luZyB0aGUgRlFETiB0byBiZVxuICogYXZhaWxhYmxlIGZvciB1c2UgYnkgb3RoZXIgY29uc3RydWN0cyAobGlrZSBMREFQIHRva2VuIHJldHJpZXZlcikgYmVmb3JlIHRoZVxuICogTERBUCBjb25zdHJ1Y3QgaXMgY3JlYXRlZC5cbiAqL1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQge1xuICBhd3Nfcm91dGU1MyBhcyByb3V0ZTUzLFxuICBhd3Nfcm91dGU1M190YXJnZXRzIGFzIHRhcmdldHMsXG4gIGF3c19lbGFzdGljbG9hZGJhbGFuY2luZ3YyIGFzIGVsYnYyXG59IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB0eXBlIHsgQXV0aEluZnJhRW52aXJvbm1lbnRDb25maWcgfSBmcm9tICcuLi9lbnZpcm9ubWVudC1jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBOZXR3b3JrQ29uZmlnIH0gZnJvbSAnLi4vY29uc3RydWN0LWNvbmZpZ3MnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIHRoZSBSb3V0ZTUzIEF1dGhlbnRpayBjb25zdHJ1Y3RcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZTUzQXV0aGVudGlrUHJvcHMge1xuICAvKipcbiAgICogRW52aXJvbm1lbnQgbmFtZSAoZS5nLiAncHJvZCcsICdkZXYnLCBldGMuKVxuICAgKi9cbiAgZW52aXJvbm1lbnQ6IHN0cmluZztcblxuICAvKipcbiAgICogRW52aXJvbm1lbnQgY29uZmlndXJhdGlvblxuICAgKi9cbiAgY29uZmlnOiBBdXRoSW5mcmFFbnZpcm9ubWVudENvbmZpZztcblxuICAvKipcbiAgICogTmV0d29yayBjb25maWd1cmF0aW9uIChETlMgem9uZXMsIGhvc3RuYW1lLCBsb2FkIGJhbGFuY2VyKVxuICAgKi9cbiAgbmV0d29yazogTmV0d29ya0NvbmZpZztcblxuICAvKipcbiAgICogQXV0aGVudGlrIEFwcGxpY2F0aW9uIExvYWQgQmFsYW5jZXIgZm9yIEEvQUFBQSBhbGlhcyByZWNvcmRzXG4gICAqL1xuICBhdXRoZW50aWtMb2FkQmFsYW5jZXI6IGVsYnYyLkFwcGxpY2F0aW9uTG9hZEJhbGFuY2VyO1xufVxuXG4vKipcbiAqIENESyBjb25zdHJ1Y3QgZm9yIFJvdXRlNTMgRE5TIHJlY29yZCBtYW5hZ2VtZW50IC0gQXV0aGVudGlrIG9ubHlcbiAqL1xuZXhwb3J0IGNsYXNzIFJvdXRlNTNBdXRoZW50aWsgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAvKipcbiAgICogVGhlIGhvc3RlZCB6b25lIHJlZmVyZW5jZVxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGhvc3RlZFpvbmU6IHJvdXRlNTMuSUhvc3RlZFpvbmU7XG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpayBBIHJlY29yZFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGF1dGhlbnRpa0FSZWNvcmQ6IHJvdXRlNTMuQVJlY29yZDtcblxuICAvKipcbiAgICogQXV0aGVudGlrIEFBQUEgcmVjb3JkXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgYXV0aGVudGlrQUFBQVJlY29yZDogcm91dGU1My5BYWFhUmVjb3JkO1xuXG4gIC8qKlxuICAgKiBGdWxsIEROUyBuYW1lIGZvciBBdXRoZW50aWsgc2VydmljZVxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGF1dGhlbnRpa0ZxZG46IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUm91dGU1M0F1dGhlbnRpa1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIC8vIEltcG9ydCB0aGUgaG9zdGVkIHpvbmUgZnJvbSBiYXNlIGluZnJhc3RydWN0dXJlXG4gICAgdGhpcy5ob3N0ZWRab25lID0gcm91dGU1My5Ib3N0ZWRab25lLmZyb21Ib3N0ZWRab25lQXR0cmlidXRlcyh0aGlzLCAnSG9zdGVkWm9uZScsIHtcbiAgICAgIGhvc3RlZFpvbmVJZDogcHJvcHMubmV0d29yay5ob3N0ZWRab25lSWQsXG4gICAgICB6b25lTmFtZTogcHJvcHMubmV0d29yay5ob3N0ZWRab25lTmFtZVxuICAgIH0pO1xuXG4gICAgLy8gQ2FsY3VsYXRlIGZ1bGwgZG9tYWluIG5hbWVcbiAgICB0aGlzLmF1dGhlbnRpa0ZxZG4gPSBgJHtwcm9wcy5uZXR3b3JrLmhvc3RuYW1lfS4ke3Byb3BzLm5ldHdvcmsuaG9zdGVkWm9uZU5hbWV9YDtcblxuICAgIC8vIENyZWF0ZSBBIHJlY29yZCBhbGlhcyBmb3IgQXV0aGVudGlrIChJUHY0KVxuICAgIHRoaXMuYXV0aGVudGlrQVJlY29yZCA9IG5ldyByb3V0ZTUzLkFSZWNvcmQodGhpcywgJ0F1dGhlbnRpa0FSZWNvcmQnLCB7XG4gICAgICB6b25lOiB0aGlzLmhvc3RlZFpvbmUsXG4gICAgICByZWNvcmROYW1lOiBwcm9wcy5uZXR3b3JrLmhvc3RuYW1lLFxuICAgICAgdGFyZ2V0OiByb3V0ZTUzLlJlY29yZFRhcmdldC5mcm9tQWxpYXMoXG4gICAgICAgIG5ldyB0YXJnZXRzLkxvYWRCYWxhbmNlclRhcmdldChwcm9wcy5hdXRoZW50aWtMb2FkQmFsYW5jZXIpXG4gICAgICApLFxuICAgICAgY29tbWVudDogYEF1dGhlbnRpayBJUHY0IGFsaWFzIHJlY29yZCBmb3IgJHtwcm9wcy5lbnZpcm9ubWVudH0gZW52aXJvbm1lbnRgXG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgQUFBQSByZWNvcmQgYWxpYXMgZm9yIEF1dGhlbnRpayAoSVB2NilcbiAgICB0aGlzLmF1dGhlbnRpa0FBQUFSZWNvcmQgPSBuZXcgcm91dGU1My5BYWFhUmVjb3JkKHRoaXMsICdBdXRoZW50aWtBQUFBUmVjb3JkJywge1xuICAgICAgem9uZTogdGhpcy5ob3N0ZWRab25lLFxuICAgICAgcmVjb3JkTmFtZTogcHJvcHMubmV0d29yay5ob3N0bmFtZSxcbiAgICAgIHRhcmdldDogcm91dGU1My5SZWNvcmRUYXJnZXQuZnJvbUFsaWFzKFxuICAgICAgICBuZXcgdGFyZ2V0cy5Mb2FkQmFsYW5jZXJUYXJnZXQocHJvcHMuYXV0aGVudGlrTG9hZEJhbGFuY2VyKVxuICAgICAgKSxcbiAgICAgIGNvbW1lbnQ6IGBBdXRoZW50aWsgSVB2NiBhbGlhcyByZWNvcmQgZm9yICR7cHJvcHMuZW52aXJvbm1lbnR9IGVudmlyb25tZW50YFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgQXV0aGVudGlrIHNlcnZpY2UgVVJMXG4gICAqL1xuICBwdWJsaWMgZ2V0QXV0aGVudGlrVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBodHRwczovLyR7dGhpcy5hdXRoZW50aWtGcWRufWA7XG4gIH1cbn1cbiJdfQ==