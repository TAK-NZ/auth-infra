"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authentik = void 0;
/**
 * Authentik Construct - CDK implementation of the Authentik service
 * Orchestrates the server, worker, and load balancer components
 */
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const elb_1 = require("./elb");
const authentik_server_1 = require("./authentik-server");
const authentik_worker_1 = require("./authentik-worker");
/**
 * CDK construct for the Authentik service - orchestrates server, worker, and load balancer
 */
class Authentik extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Create the load balancer and networking
        const elb = new elb_1.Elb(this, 'ELB', {
            environment: props.environment,
            config: props.config,
            vpc: props.vpc,
            sslCertificateArn: props.sslCertificateArn
        });
        // Create the Authentik server
        const server = new authentik_server_1.AuthentikServer(this, 'Server', {
            environment: props.environment,
            config: props.config,
            vpc: props.vpc,
            ecsSecurityGroup: props.ecsSecurityGroup,
            ecsCluster: props.ecsCluster,
            s3ConfBucket: props.s3ConfBucket,
            envFileS3Uri: props.envFileS3Uri,
            envFileS3Key: props.envFileS3Key,
            adminUserEmail: props.adminUserEmail,
            ldapBaseDn: props.ldapBaseDn,
            useConfigFile: props.useConfigFile,
            ecrRepositoryArn: props.ecrRepositoryArn,
            enableExecute: props.enableExecute,
            dbSecret: props.dbSecret,
            dbHostname: props.dbHostname,
            redisAuthToken: props.redisAuthToken,
            redisHostname: props.redisHostname,
            secretKey: props.secretKey,
            adminUserPassword: props.adminUserPassword,
            adminUserToken: props.adminUserToken,
            ldapToken: props.ldapToken,
            efsId: props.efsId,
            efsMediaAccessPointId: props.efsMediaAccessPointId,
            efsCustomTemplatesAccessPointId: props.efsCustomTemplatesAccessPointId
        });
        // Create the Authentik worker
        const worker = new authentik_worker_1.AuthentikWorker(this, 'Worker', {
            environment: props.environment,
            config: props.config,
            vpc: props.vpc,
            ecsSecurityGroup: props.ecsSecurityGroup,
            ecsCluster: props.ecsCluster,
            s3ConfBucket: props.s3ConfBucket,
            envFileS3Key: props.envFileS3Key,
            ecrRepositoryArn: props.ecrRepositoryArn,
            enableExecute: props.enableExecute,
            dbSecret: props.dbSecret,
            dbHostname: props.dbHostname,
            redisAuthToken: props.redisAuthToken,
            redisHostname: props.redisHostname,
            secretKey: props.secretKey,
            efsId: props.efsId,
            efsMediaAccessPointId: props.efsMediaAccessPointId,
            efsCustomTemplatesAccessPointId: props.efsCustomTemplatesAccessPointId
        });
        // Connect the server to the load balancer
        server.createTargetGroup(props.vpc, elb.httpsListener);
        // Expose public properties
        this.loadBalancer = elb.loadBalancer;
        this.taskDefinition = server.taskDefinition;
        this.ecsService = server.ecsService;
        this.workerService = worker.ecsService;
        this.dnsName = elb.dnsName;
        // Export additional outputs
        new aws_cdk_lib_1.CfnOutput(this, 'AuthentikServerServiceName', {
            value: this.ecsService.serviceName,
            description: 'The name of the Authentik server ECS service'
        });
        new aws_cdk_lib_1.CfnOutput(this, 'AuthentikWorkerServiceName', {
            value: this.workerService.serviceName,
            description: 'The name of the Authentik worker ECS service'
        });
    }
}
exports.Authentik = Authentik;
//# sourceMappingURL=data:application/json;base64,