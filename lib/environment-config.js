/**
 * Environment-specific configuration objects and utilities
 */
/**
 * Production environment config
 */
export const prodConfig = {
    envType: 'prod',
    isProd: true,
    // Database config
    dbInstanceClass: 'db.t4g.medium',
    dbInstanceCount: 2,
    dbBackupRetentionDays: 7,
    // Redis config
    redisCacheNodeType: 'cache.t4g.small',
    redisNumCacheClusters: 2,
    // ECS config
    ecsTaskCpu: 1024,
    ecsTaskMemory: 2048,
    ecsTaskDesiredCount: 2,
    // EFS config
    efsThroughputMode: 'bursting',
    // Scaling
    minCapacity: 2,
    maxCapacity: 6
};
/**
 * Development/Test environment config
 */
export const devTestConfig = {
    envType: 'dev-test',
    isProd: false,
    // Database config
    dbInstanceClass: 'db.t4g.micro',
    dbInstanceCount: 1,
    dbBackupRetentionDays: 1,
    // Redis config
    redisCacheNodeType: 'cache.t4g.micro',
    redisNumCacheClusters: 1,
    // ECS config
    ecsTaskCpu: 512,
    ecsTaskMemory: 1024,
    ecsTaskDesiredCount: 1,
    // EFS config
    efsThroughputMode: 'bursting',
    // Scaling
    minCapacity: 1,
    maxCapacity: 3
};
/**
 * Get environment-specific configuration based on the provided environment type
 * @param envType - Environment type ('prod' or 'dev-test')
 * @returns Environment-specific configuration
 */
export function getEnvironmentConfig(envType) {
    return envType === 'prod' ? prodConfig : devTestConfig;
}
/**
 * Merge environment config with overrides
 * @param envType - Environment type ('prod' or 'dev-test')
 * @param overrides - Optional configuration overrides
 * @returns Merged configuration
 */
export function mergeConfig(envType, overrides) {
    const baseConfig = getEnvironmentConfig(envType);
    return {
        ...baseConfig,
        ...(overrides || {})
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbm1lbnQtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZW52aXJvbm1lbnQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBZ0NIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFlO0lBQ3BDLE9BQU8sRUFBRSxNQUFNO0lBQ2YsTUFBTSxFQUFFLElBQUk7SUFDWixrQkFBa0I7SUFDbEIsZUFBZSxFQUFFLGVBQWU7SUFDaEMsZUFBZSxFQUFFLENBQUM7SUFDbEIscUJBQXFCLEVBQUUsQ0FBQztJQUN4QixlQUFlO0lBQ2Ysa0JBQWtCLEVBQUUsaUJBQWlCO0lBQ3JDLHFCQUFxQixFQUFFLENBQUM7SUFDeEIsYUFBYTtJQUNiLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLGFBQWEsRUFBRSxJQUFJO0lBQ25CLG1CQUFtQixFQUFFLENBQUM7SUFDdEIsYUFBYTtJQUNiLGlCQUFpQixFQUFFLFVBQVU7SUFDN0IsVUFBVTtJQUNWLFdBQVcsRUFBRSxDQUFDO0lBQ2QsV0FBVyxFQUFFLENBQUM7Q0FDZixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQWU7SUFDdkMsT0FBTyxFQUFFLFVBQVU7SUFDbkIsTUFBTSxFQUFFLEtBQUs7SUFDYixrQkFBa0I7SUFDbEIsZUFBZSxFQUFFLGNBQWM7SUFDL0IsZUFBZSxFQUFFLENBQUM7SUFDbEIscUJBQXFCLEVBQUUsQ0FBQztJQUN4QixlQUFlO0lBQ2Ysa0JBQWtCLEVBQUUsaUJBQWlCO0lBQ3JDLHFCQUFxQixFQUFFLENBQUM7SUFDeEIsYUFBYTtJQUNiLFVBQVUsRUFBRSxHQUFHO0lBQ2YsYUFBYSxFQUFFLElBQUk7SUFDbkIsbUJBQW1CLEVBQUUsQ0FBQztJQUN0QixhQUFhO0lBQ2IsaUJBQWlCLEVBQUUsVUFBVTtJQUM3QixVQUFVO0lBQ1YsV0FBVyxFQUFFLENBQUM7SUFDZCxXQUFXLEVBQUUsQ0FBQztDQUNmLENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFDLE9BQWdCO0lBQ25ELE9BQU8sT0FBTyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7QUFDekQsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FBQyxPQUFnQixFQUFFLFNBQStCO0lBQzNFLE1BQU0sVUFBVSxHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELE9BQU87UUFDTCxHQUFHLFVBQVU7UUFDYixHQUFHLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztLQUNyQixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW52aXJvbm1lbnQtc3BlY2lmaWMgY29uZmlndXJhdGlvbiBvYmplY3RzIGFuZCB1dGlsaXRpZXNcbiAqL1xuXG4vKipcbiAqIEVudmlyb25tZW50IFR5cGVcbiAqL1xuZXhwb3J0IHR5cGUgRW52VHlwZSA9ICdwcm9kJyB8ICdkZXYtdGVzdCc7XG5cbi8qKlxuICogQmFzZSBDb25maWd1cmF0aW9uIGludGVyZmFjZSBmb3IgYWxsIGVudmlyb25tZW50c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VDb25maWcge1xuICBlbnZUeXBlOiBFbnZUeXBlO1xuICBpc1Byb2Q6IGJvb2xlYW47XG4gIC8vIERhdGFiYXNlIGNvbmZpZ1xuICBkYkluc3RhbmNlQ2xhc3M6IHN0cmluZztcbiAgZGJJbnN0YW5jZUNvdW50OiBudW1iZXI7XG4gIGRiQmFja3VwUmV0ZW50aW9uRGF5czogbnVtYmVyO1xuICAvLyBSZWRpcyBjb25maWdcbiAgcmVkaXNDYWNoZU5vZGVUeXBlOiBzdHJpbmc7XG4gIHJlZGlzTnVtQ2FjaGVDbHVzdGVyczogbnVtYmVyO1xuICAvLyBFQ1MgY29uZmlnXG4gIGVjc1Rhc2tDcHU6IG51bWJlcjtcbiAgZWNzVGFza01lbW9yeTogbnVtYmVyO1xuICBlY3NUYXNrRGVzaXJlZENvdW50OiBudW1iZXI7XG4gIC8vIEVGUyBjb25maWdcbiAgZWZzVGhyb3VnaHB1dE1vZGU6ICdidXJzdGluZycgfCAncHJvdmlzaW9uZWQnO1xuICBlZnNQcm92aXNpb25lZFRocm91Z2hwdXQ/OiBudW1iZXI7XG4gIC8vIFNjYWxpbmdcbiAgbWluQ2FwYWNpdHk6IG51bWJlcjtcbiAgbWF4Q2FwYWNpdHk6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBQcm9kdWN0aW9uIGVudmlyb25tZW50IGNvbmZpZ1xuICovXG5leHBvcnQgY29uc3QgcHJvZENvbmZpZzogQmFzZUNvbmZpZyA9IHtcbiAgZW52VHlwZTogJ3Byb2QnLFxuICBpc1Byb2Q6IHRydWUsXG4gIC8vIERhdGFiYXNlIGNvbmZpZ1xuICBkYkluc3RhbmNlQ2xhc3M6ICdkYi50NGcubWVkaXVtJyxcbiAgZGJJbnN0YW5jZUNvdW50OiAyLFxuICBkYkJhY2t1cFJldGVudGlvbkRheXM6IDcsXG4gIC8vIFJlZGlzIGNvbmZpZ1xuICByZWRpc0NhY2hlTm9kZVR5cGU6ICdjYWNoZS50NGcuc21hbGwnLFxuICByZWRpc051bUNhY2hlQ2x1c3RlcnM6IDIsXG4gIC8vIEVDUyBjb25maWdcbiAgZWNzVGFza0NwdTogMTAyNCxcbiAgZWNzVGFza01lbW9yeTogMjA0OCxcbiAgZWNzVGFza0Rlc2lyZWRDb3VudDogMixcbiAgLy8gRUZTIGNvbmZpZ1xuICBlZnNUaHJvdWdocHV0TW9kZTogJ2J1cnN0aW5nJyxcbiAgLy8gU2NhbGluZ1xuICBtaW5DYXBhY2l0eTogMixcbiAgbWF4Q2FwYWNpdHk6IDZcbn07XG5cbi8qKlxuICogRGV2ZWxvcG1lbnQvVGVzdCBlbnZpcm9ubWVudCBjb25maWdcbiAqL1xuZXhwb3J0IGNvbnN0IGRldlRlc3RDb25maWc6IEJhc2VDb25maWcgPSB7XG4gIGVudlR5cGU6ICdkZXYtdGVzdCcsXG4gIGlzUHJvZDogZmFsc2UsXG4gIC8vIERhdGFiYXNlIGNvbmZpZ1xuICBkYkluc3RhbmNlQ2xhc3M6ICdkYi50NGcubWljcm8nLFxuICBkYkluc3RhbmNlQ291bnQ6IDEsXG4gIGRiQmFja3VwUmV0ZW50aW9uRGF5czogMSxcbiAgLy8gUmVkaXMgY29uZmlnXG4gIHJlZGlzQ2FjaGVOb2RlVHlwZTogJ2NhY2hlLnQ0Zy5taWNybycsXG4gIHJlZGlzTnVtQ2FjaGVDbHVzdGVyczogMSxcbiAgLy8gRUNTIGNvbmZpZ1xuICBlY3NUYXNrQ3B1OiA1MTIsXG4gIGVjc1Rhc2tNZW1vcnk6IDEwMjQsXG4gIGVjc1Rhc2tEZXNpcmVkQ291bnQ6IDEsXG4gIC8vIEVGUyBjb25maWdcbiAgZWZzVGhyb3VnaHB1dE1vZGU6ICdidXJzdGluZycsXG4gIC8vIFNjYWxpbmdcbiAgbWluQ2FwYWNpdHk6IDEsXG4gIG1heENhcGFjaXR5OiAzXG59O1xuXG4vKipcbiAqIEdldCBlbnZpcm9ubWVudC1zcGVjaWZpYyBjb25maWd1cmF0aW9uIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBlbnZpcm9ubWVudCB0eXBlXG4gKiBAcGFyYW0gZW52VHlwZSAtIEVudmlyb25tZW50IHR5cGUgKCdwcm9kJyBvciAnZGV2LXRlc3QnKVxuICogQHJldHVybnMgRW52aXJvbm1lbnQtc3BlY2lmaWMgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW52aXJvbm1lbnRDb25maWcoZW52VHlwZTogRW52VHlwZSk6IEJhc2VDb25maWcge1xuICByZXR1cm4gZW52VHlwZSA9PT0gJ3Byb2QnID8gcHJvZENvbmZpZyA6IGRldlRlc3RDb25maWc7XG59XG5cbi8qKlxuICogTWVyZ2UgZW52aXJvbm1lbnQgY29uZmlnIHdpdGggb3ZlcnJpZGVzXG4gKiBAcGFyYW0gZW52VHlwZSAtIEVudmlyb25tZW50IHR5cGUgKCdwcm9kJyBvciAnZGV2LXRlc3QnKVxuICogQHBhcmFtIG92ZXJyaWRlcyAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb3ZlcnJpZGVzXG4gKiBAcmV0dXJucyBNZXJnZWQgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDb25maWcoZW52VHlwZTogRW52VHlwZSwgb3ZlcnJpZGVzPzogUGFydGlhbDxCYXNlQ29uZmlnPik6IEJhc2VDb25maWcge1xuICBjb25zdCBiYXNlQ29uZmlnID0gZ2V0RW52aXJvbm1lbnRDb25maWcoZW52VHlwZSk7XG4gIHJldHVybiB7XG4gICAgLi4uYmFzZUNvbmZpZyxcbiAgICAuLi4ob3ZlcnJpZGVzIHx8IHt9KVxuICB9O1xufVxuIl19