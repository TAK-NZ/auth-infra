"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PROD_CONFIG = exports.DEV_TEST_CONFIG = void 0;
exports.getEnvironmentConfig = getEnvironmentConfig;
exports.mergeEnvironmentConfig = mergeEnvironmentConfig;
/**
 * Environment-specific configuration for auth infrastructure resources
 */
const cdk = __importStar(require("aws-cdk-lib"));
/**
 * Development/Test environment configuration
 * Optimized for cost and development workflow
 */
exports.DEV_TEST_CONFIG = {
    database: {
        instanceClass: 'db.serverless', // Aurora Serverless v2 for cost optimization
        instanceCount: 1, // Single instance for dev/test
        backupRetentionDays: 1, // Minimal backup retention
        deletionProtection: false, // Allow deletion for dev/test
        enablePerformanceInsights: false, // Disable to save costs
        enableMonitoring: false, // Disable enhanced monitoring
    },
    redis: {
        nodeType: 'cache.t4g.micro', // Smallest instance for cost optimization
        numCacheClusters: 1, // Single cluster
        automaticFailoverEnabled: false, // Disable failover for cost savings
    },
    ecs: {
        taskCpu: 512, // Minimal CPU allocation
        taskMemory: 1024, // Minimal memory allocation
        desiredCount: 1, // Single server instance
        minCapacity: 1, // Minimum scaling capacity
        maxCapacity: 3, // Limited scaling for cost control
        workerDesiredCount: 1, // Single worker instance
        workerMinCapacity: 1, // Minimum worker capacity
        workerMaxCapacity: 2, // Limited worker scaling
    },
    efs: {
        throughputMode: 'bursting', // Bursting mode for cost optimization
    },
    general: {
        removalPolicy: cdk.RemovalPolicy.DESTROY, // Allow resource deletion
        enableDetailedLogging: true, // Keep logging for debugging
    },
    monitoring: {
        enableCloudWatchAlarms: false, // Disable alarms to save costs
        logRetentionDays: 7, // Short retention for cost savings
    },
};
/**
 * Production environment configuration
 * Optimized for high availability, security, and production workloads
 */
exports.PROD_CONFIG = {
    database: {
        instanceClass: 'db.t4g.large', // Larger instance for production workloads
        instanceCount: 2, // Multi-AZ deployment for high availability
        backupRetentionDays: 7, // Extended backup retention
        deletionProtection: true, // Protect production data
        enablePerformanceInsights: true, // Enable performance monitoring
        enableMonitoring: true, // Enable enhanced monitoring
    },
    redis: {
        nodeType: 'cache.t4g.small', // Adequate size for production
        numCacheClusters: 2, // Multi-node for high availability
        automaticFailoverEnabled: true, // Enable automatic failover
    },
    ecs: {
        taskCpu: 1024, // Higher CPU for production performance
        taskMemory: 2048, // Higher memory for production performance
        desiredCount: 2, // Multiple instances for availability
        minCapacity: 2, // Minimum production capacity
        maxCapacity: 6, // Higher scaling limits
        workerDesiredCount: 2, // Multiple worker instances
        workerMinCapacity: 1, // Minimum worker capacity
        workerMaxCapacity: 4, // Higher worker scaling limits
    },
    efs: {
        throughputMode: 'bursting', // Bursting mode for most workloads
    },
    general: {
        removalPolicy: cdk.RemovalPolicy.RETAIN, // Protect production resources
        enableDetailedLogging: true, // Enable detailed logging
    },
    monitoring: {
        enableCloudWatchAlarms: true, // Enable production monitoring
        logRetentionDays: 30, // Extended log retention
    },
};
/**
 * Get environment configuration based on environment type
 */
function getEnvironmentConfig(envType) {
    switch (envType.toLowerCase()) {
        case 'prod':
        case 'production':
            return exports.PROD_CONFIG;
        case 'dev':
        case 'dev-test':
        case 'development':
        default:
            return exports.DEV_TEST_CONFIG;
    }
}
/**
 * Merge environment config with custom overrides
 * Allows fine-grained control over individual settings
 */
function mergeEnvironmentConfig(baseConfig, overrides) {
    return {
        database: { ...baseConfig.database, ...overrides.database },
        redis: { ...baseConfig.redis, ...overrides.redis },
        ecs: { ...baseConfig.ecs, ...overrides.ecs },
        efs: { ...baseConfig.efs, ...overrides.efs },
        general: { ...baseConfig.general, ...overrides.general },
        monitoring: { ...baseConfig.monitoring, ...overrides.monitoring },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbm1lbnQtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZW52aXJvbm1lbnQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOElBLG9EQVdDO0FBTUQsd0RBbUJDO0FBbExEOztHQUVHO0FBQ0gsaURBQW1DO0FBc0RuQzs7O0dBR0c7QUFDVSxRQUFBLGVBQWUsR0FBK0I7SUFDekQsUUFBUSxFQUFFO1FBQ1IsYUFBYSxFQUFFLGVBQWUsRUFBTyw2Q0FBNkM7UUFDbEYsYUFBYSxFQUFFLENBQUMsRUFBcUIsK0JBQStCO1FBQ3BFLG1CQUFtQixFQUFFLENBQUMsRUFBZSwyQkFBMkI7UUFDaEUsa0JBQWtCLEVBQUUsS0FBSyxFQUFZLDhCQUE4QjtRQUNuRSx5QkFBeUIsRUFBRSxLQUFLLEVBQUssd0JBQXdCO1FBQzdELGdCQUFnQixFQUFFLEtBQUssRUFBYyw4QkFBOEI7S0FDcEU7SUFDRCxLQUFLLEVBQUU7UUFDTCxRQUFRLEVBQUUsaUJBQWlCLEVBQVUsMENBQTBDO1FBQy9FLGdCQUFnQixFQUFFLENBQUMsRUFBa0IsaUJBQWlCO1FBQ3RELHdCQUF3QixFQUFFLEtBQUssRUFBTSxvQ0FBb0M7S0FDMUU7SUFDRCxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsR0FBRyxFQUF5Qix5QkFBeUI7UUFDOUQsVUFBVSxFQUFFLElBQUksRUFBcUIsNEJBQTRCO1FBQ2pFLFlBQVksRUFBRSxDQUFDLEVBQXNCLHlCQUF5QjtRQUM5RCxXQUFXLEVBQUUsQ0FBQyxFQUF1QiwyQkFBMkI7UUFDaEUsV0FBVyxFQUFFLENBQUMsRUFBdUIsbUNBQW1DO1FBQ3hFLGtCQUFrQixFQUFFLENBQUMsRUFBZ0IseUJBQXlCO1FBQzlELGlCQUFpQixFQUFFLENBQUMsRUFBaUIsMEJBQTBCO1FBQy9ELGlCQUFpQixFQUFFLENBQUMsRUFBaUIseUJBQXlCO0tBQy9EO0lBQ0QsR0FBRyxFQUFFO1FBQ0gs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QUFFLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxHQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUU7UUFDeEQsVUFBVSxFQUFFLEVBQUUsR0FBRyxVQUFVLENBQUMsVUFBVSxFQUFFLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRTtLQUNsRSxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW52aXJvbm1lbnQtc3BlY2lmaWMgY29uZmlndXJhdGlvbiBmb3IgYXV0aCBpbmZyYXN0cnVjdHVyZSByZXNvdXJjZXNcbiAqL1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcblxuLyoqXG4gKiBFbnZpcm9ubWVudC1zcGVjaWZpYyBjb25maWd1cmF0aW9uIGZvciBhdXRoIGluZnJhc3RydWN0dXJlIHJlc291cmNlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhJbmZyYUVudmlyb25tZW50Q29uZmlnIHtcbiAgLy8gRGF0YWJhc2UgY29uZmlndXJhdGlvblxuICBkYXRhYmFzZToge1xuICAgIGluc3RhbmNlQ2xhc3M6IHN0cmluZzsgICAgICAgICAgICAgICAgLy8gUkRTIGluc3RhbmNlIGNsYXNzIChlLmcuLCAnZGIuc2VydmVybGVzcycsICdkYi50NGcubGFyZ2UnKVxuICAgIGluc3RhbmNlQ291bnQ6IG51bWJlcjsgICAgICAgICAgICAgICAgLy8gTnVtYmVyIG9mIGRhdGFiYXNlIGluc3RhbmNlc1xuICAgIGJhY2t1cFJldGVudGlvbkRheXM6IG51bWJlcjsgICAgICAgICAgLy8gQmFja3VwIHJldGVudGlvbiBwZXJpb2QgaW4gZGF5c1xuICAgIGRlbGV0aW9uUHJvdGVjdGlvbjogYm9vbGVhbjsgICAgICAgICAgLy8gRW5hYmxlIGRlbGV0aW9uIHByb3RlY3Rpb25cbiAgICBlbmFibGVQZXJmb3JtYW5jZUluc2lnaHRzOiBib29sZWFuOyAgIC8vIEVuYWJsZSBSRFMgUGVyZm9ybWFuY2UgSW5zaWdodHNcbiAgICBlbmFibGVNb25pdG9yaW5nOiBib29sZWFuOyAgICAgICAgICAgIC8vIEVuYWJsZSBlbmhhbmNlZCBtb25pdG9yaW5nXG4gIH07XG4gIFxuICAvLyBSZWRpcyBjb25maWd1cmF0aW9uXG4gIHJlZGlzOiB7XG4gICAgbm9kZVR5cGU6IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAvLyBFbGFzdGlDYWNoZSBub2RlIHR5cGVcbiAgICBudW1DYWNoZUNsdXN0ZXJzOiBudW1iZXI7ICAgICAgICAgICAgIC8vIE51bWJlciBvZiBjYWNoZSBjbHVzdGVyc1xuICAgIGF1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZDogYm9vbGVhbjsgICAgLy8gRW5hYmxlIGF1dG9tYXRpYyBmYWlsb3ZlclxuICB9O1xuICBcbiAgLy8gRUNTIGNvbmZpZ3VyYXRpb25cbiAgZWNzOiB7XG4gICAgdGFza0NwdTogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAvLyBDUFUgdW5pdHMgZm9yIEVDUyB0YXNrc1xuICAgIHRhc2tNZW1vcnk6IG51bWJlcjsgICAgICAgICAgICAgICAgICAgLy8gTWVtb3J5IChNQikgZm9yIEVDUyB0YXNrc1xuICAgIGRlc2lyZWRDb3VudDogbnVtYmVyOyAgICAgICAgICAgICAgICAgLy8gRGVzaXJlZCBudW1iZXIgb2Ygc2VydmVyIHRhc2tzXG4gICAgbWluQ2FwYWNpdHk6IG51bWJlcjsgICAgICAgICAgICAgICAgICAvLyBNaW5pbXVtIGNhcGFjaXR5IGZvciBhdXRvIHNjYWxpbmdcbiAgICBtYXhDYXBhY2l0eTogbnVtYmVyOyAgICAgICAgICAgICAgICAgIC8vIE1heGltdW0gY2FwYWNpdHkgZm9yIGF1dG8gc2NhbGluZ1xuICAgIHdvcmtlckRlc2lyZWRDb3VudD86IG51bWJlcjsgICAgICAgICAgLy8gRGVzaXJlZCBudW1iZXIgb2Ygd29ya2VyIHRhc2tzXG4gICAgd29ya2VyTWluQ2FwYWNpdHk/OiBudW1iZXI7ICAgICAgICAgICAvLyBNaW5pbXVtIHdvcmtlciBjYXBhY2l0eVxuICAgIHdvcmtlck1heENhcGFjaXR5PzogbnVtYmVyOyAgICAgICAgICAgLy8gTWF4aW11bSB3b3JrZXIgY2FwYWNpdHlcbiAgfTtcbiAgXG4gIC8vIEVGUyBjb25maWd1cmF0aW9uXG4gIGVmczoge1xuICAgIHRocm91Z2hwdXRNb2RlOiAnYnVyc3RpbmcnIHwgJ3Byb3Zpc2lvbmVkJzsgIC8vIEVGUyB0aHJvdWdocHV0IG1vZGVcbiAgICBwcm92aXNpb25lZFRocm91Z2hwdXQ/OiBudW1iZXI7ICAgICAgICAgICAgICAgLy8gUHJvdmlzaW9uZWQgdGhyb3VnaHB1dCAoTUIvcylcbiAgfTtcblxuICAvLyBHZW5lcmFsIGluZnJhc3RydWN0dXJlIHNldHRpbmdzXG4gIGdlbmVyYWw6IHtcbiAgICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeTsgICAgIC8vIFJlc291cmNlIHJlbW92YWwgcG9saWN5XG4gICAgZW5hYmxlRGV0YWlsZWRMb2dnaW5nOiBib29sZWFuOyAgICAgICAvLyBFbmFibGUgZGV0YWlsZWQgQ2xvdWRXYXRjaCBsb2dnaW5nXG4gIH07XG5cbiAgLy8gTW9uaXRvcmluZyBjb25maWd1cmF0aW9uXG4gIG1vbml0b3Jpbmc6IHtcbiAgICBlbmFibGVDbG91ZFdhdGNoQWxhcm1zOiBib29sZWFuOyAgICAgIC8vIEVuYWJsZSBDbG91ZFdhdGNoIGFsYXJtc1xuICAgIGxvZ1JldGVudGlvbkRheXM6IG51bWJlcjsgICAgICAgICAgICAgLy8gTG9nIHJldGVudGlvbiBwZXJpb2QgaW4gZGF5c1xuICB9O1xufVxuXG4vKipcbiAqIERldmVsb3BtZW50L1Rlc3QgZW52aXJvbm1lbnQgY29uZmlndXJhdGlvblxuICogT3B0aW1pemVkIGZvciBjb3N0IGFuZCBkZXZlbG9wbWVudCB3b3JrZmxvd1xuICovXG5leHBvcnQgY29uc3QgREVWX1RFU1RfQ09ORklHOiBBdXRoSW5mcmFFbnZpcm9ubWVudENvbmZpZyA9IHtcbiAgZGF0YWJhc2U6IHtcbiAgICBpbnN0YW5jZUNsYXNzOiAnZGIuc2VydmVybGVzcycsICAgICAgLy8gQXVyb3JhIFNlcnZlcmxlc3MgdjIgZm9yIGNvc3Qgb3B0aW1pemF0aW9uXG4gICAgaW5zdGFuY2VDb3VudDogMSwgICAgICAgICAgICAgICAgICAgIC8vIFNpbmdsZSBpbnN0YW5jZSBmb3IgZGV2L3Rlc3RcbiAgICBiYWNrdXBSZXRlbnRpb25EYXlzOiAxLCAgICAgICAgICAgICAgLy8gTWluaW1hbCBiYWNrdXAgcmV0ZW50aW9uXG4gICAgZGVsZXRpb25Qcm90ZWN0aW9uOiBmYWxzZSwgICAgICAgICAgIC8vIEFsbG93IGRlbGV0aW9uIGZvciBkZXYvdGVzdFxuICAgIGVuYWJsZVBlcmZvcm1hbmNlSW5zaWdodHM6IGZhbHNlLCAgICAvLyBEaXNhYmxlIHRvIHNhdmUgY29zdHNcbiAgICBlbmFibGVNb25pdG9yaW5nOiBmYWxzZSwgICAgICAgICAgICAgLy8gRGlzYWJsZSBlbmhhbmNlZCBtb25pdG9yaW5nXG4gIH0sXG4gIHJlZGlzOiB7XG4gICAgbm9kZVR5cGU6ICdjYWNoZS50NGcubWljcm8nLCAgICAgICAgIC8vIFNtYWxsZXN0IGluc3RhbmNlIGZvciBjb3N0IG9wdGltaXphdGlvblxuICAgIG51bUNhY2hlQ2x1c3RlcnM6IDEsICAgICAgICAgICAgICAgICAvLyBTaW5nbGUgY2x1c3RlclxuICAgIGF1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZDogZmFsc2UsICAgICAvLyBEaXNhYmxlIGZhaWxvdmVyIGZvciBjb3N0IHNhdmluZ3NcbiAgfSxcbiAgZWNzOiB7XG4gICAgdGFza0NwdTogNTEyLCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pbmltYWwgQ1BVIGFsbG9jYXRpb25cbiAgICB0YXNrTWVtb3J5OiAxMDI0LCAgICAgICAgICAgICAgICAgICAgLy8gTWluaW1hbCBtZW1vcnkgYWxsb2NhdGlvblxuICAgIGRlc2lyZWRDb3VudDogMSwgICAgICAgICAgICAgICAgICAgICAvLyBTaW5nbGUgc2VydmVyIGluc3RhbmNlXG4gICAgbWluQ2FwYWNpdHk6IDEsICAgICAgICAgICAgICAgICAgICAgIC8vIE1pbmltdW0gc2NhbGluZyBjYXBhY2l0eVxuICAgIG1heENhcGFjaXR5OiAzLCAgICAgICAgICAgICAgICAgICAgICAvLyBMaW1pdGVkIHNjYWxpbmcgZm9yIGNvc3QgY29udHJvbFxuICAgIHdvcmtlckRlc2lyZWRDb3VudDogMSwgICAgICAgICAgICAgICAvLyBTaW5nbGUgd29ya2VyIGluc3RhbmNlXG4gICAgd29ya2VyTWluQ2FwYWNpdHk6IDEsICAgICAgICAgICAgICAgIC8vIE1pbmltdW0gd29ya2VyIGNhcGFjaXR5XG4gICAgd29ya2VyTWF4Q2FwYWNpdHk6IDIsICAgICAgICAgICAgICAgIC8vIExpbWl0ZWQgd29ya2VyIHNjYWxpbmdcbiAgfSxcbiAgZWZzOiB7XG4gICAgdGhyb3VnaHB1dE1vZGU6ICdidXJzdGluZycsICAgICAgICAgIC8vIEJ1cnN0aW5nIG1vZGUgZm9yIGNvc3Qgb3B0aW1pemF0aW9uXG4gIH0sXG4gIGdlbmVyYWw6IHtcbiAgICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLCAgLy8gQWxsb3cgcmVzb3VyY2UgZGVsZXRpb25cbiAgICBlbmFibGVEZXRhaWxlZExvZ2dpbmc6IHRydWUsICAgICAgICAgICAgICAgLy8gS2VlcCBsb2dnaW5nIGZvciBkZWJ1Z2dpbmdcbiAgfSxcbiAgbW9uaXRvcmluZzoge1xuICAgIGVuYWJsZUNsb3VkV2F0Y2hBbGFybXM6IGZhbHNlLCAgICAgICAvLyBEaXNhYmxlIGFsYXJtcyB0byBzYXZlIGNvc3RzXG4gICAgbG9nUmV0ZW50aW9uRGF5czogNywgICAgICAgICAgICAgICAgIC8vIFNob3J0IHJldGVudGlvbiBmb3IgY29zdCBzYXZpbmdzXG4gIH0sXG59O1xuXG4vKipcbiAqIFByb2R1Y3Rpb24gZW52aXJvbm1lbnQgY29uZmlndXJhdGlvblxuICogT3B0aW1pemVkIGZvciBoaWdoIGF2YWlsYWJpbGl0eSwgc2VjdXJpdHksIGFuZCBwcm9kdWN0aW9uIHdvcmtsb2Fkc1xuICovXG5leHBvcnQgY29uc3QgUFJPRF9DT05GSUc6IEF1dGhJbmZyYUVudmlyb25tZW50Q29uZmlnID0ge1xuICBkYXRhYmFzZToge1xuICAgIGluc3RhbmNlQ2xhc3M6ICdkYi50NGcubGFyZ2UnLCAgICAgICAvLyBMYXJnZXIgaW5zdGFuY2UgZm9yIHByb2R1Y3Rpb24gd29ya2xvYWRzXG4gICAgaW5zdGFuY2VDb3VudDogMiwgICAgICAgICAgICAgICAgICAgIC8vIE11bHRpLUFaIGRlcGxveW1lbnQgZm9yIGhpZ2ggYXZhaWxhYmlsaXR5XG4gICAgYmFja3VwUmV0ZW50aW9uRGF5czogNywgICAgICAgICAgICAgIC8vIEV4dGVuZGVkIGJhY2t1cCByZXRlbnRpb25cbiAgICBkZWxldGlvblByb3RlY3Rpb246IHRydWUsICAgICAgICAgICAgLy8gUHJvdGVjdCBwcm9kdWN0aW9uIGRhdGFcbiAgICBlbmFibGVQZXJmb3JtYW5jZUluc2lnaHRzOiB0cnVlLCAgICAgLy8gRW5hYmxlIHBlcmZvcm1hbmNlIG1vbml0b3JpbmdcbiAgICBlbmFibGVNb25pdG9yaW5nOiB0cnVlLCAgICAgICAgICAgICAgLy8gRW5hYmxlIGVuaGFuY2VkIG1vbml0b3JpbmdcbiAgfSxcbiAgcmVkaXM6IHtcbiAgICBub2RlVHlwZTogJ2NhY2hlLnQ0Zy5zbWFsbCcsICAgICAgICAgLy8gQWRlcXVhdGUgc2l6ZSBmb3IgcHJvZHVjdGlvblxuICAgIG51bUNhY2hlQ2x1c3RlcnM6IDIsICAgICAgICAgICAgICAgICAvLyBNdWx0aS1ub2RlIGZvciBoaWdoIGF2YWlsYWJpbGl0eVxuICAgIGF1dG9tYXRpY0ZhaWxvdmVyRW5hYmxlZDogdHJ1ZSwgICAgICAvLyBFbmFibGUgYXV0b21hdGljIGZhaWxvdmVyXG4gIH0sXG4gIGVjczoge1xuICAgIHRhc2tDcHU6IDEwMjQsICAgICAgICAgICAgICAgICAgICAgICAvLyBIaWdoZXIgQ1BVIGZvciBwcm9kdWN0aW9uIHBlcmZvcm1hbmNlXG4gICAgdGFza01lbW9yeTogMjA0OCwgICAgICAgICAgICAgICAgICAgIC8vIEhpZ2hlciBtZW1vcnkgZm9yIHByb2R1Y3Rpb24gcGVyZm9ybWFuY2VcbiAgICBkZXNpcmVkQ291bnQ6IDIsICAgICAgICAgICAgICAgICAgICAgLy8gTXVsdGlwbGUgaW5zdGFuY2VzIGZvciBhdmFpbGFiaWxpdHlcbiAgICBtaW5DYXBhY2l0eTogMiwgICAgICAgICAgICAgICAgICAgICAgLy8gTWluaW11bSBwcm9kdWN0aW9uIGNhcGFjaXR5XG4gICAgbWF4Q2FwYWNpdHk6IDYsICAgICAgICAgICAgICAgICAgICAgIC8vIEhpZ2hlciBzY2FsaW5nIGxpbWl0c1xuICAgIHdvcmtlckRlc2lyZWRDb3VudDogMiwgICAgICAgICAgICAgICAvLyBNdWx0aXBsZSB3b3JrZXIgaW5zdGFuY2VzXG4gICAgd29ya2VyTWluQ2FwYWNpdHk6IDEsICAgICAgICAgICAgICAgIC8vIE1pbmltdW0gd29ya2VyIGNhcGFjaXR5XG4gICAgd29ya2VyTWF4Q2FwYWNpdHk6IDQsICAgICAgICAgICAgICAgIC8vIEhpZ2hlciB3b3JrZXIgc2NhbGluZyBsaW1pdHNcbiAgfSxcbiAgZWZzOiB7XG4gICAgdGhyb3VnaHB1dE1vZGU6ICdidXJzdGluZycsICAgICAgICAgIC8vIEJ1cnN0aW5nIG1vZGUgZm9yIG1vc3Qgd29ya2xvYWRzXG4gIH0sXG4gIGdlbmVyYWw6IHtcbiAgICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5SRVRBSU4sICAvLyBQcm90ZWN0IHByb2R1Y3Rpb24gcmVzb3VyY2VzXG4gICAgZW5hYmxlRGV0YWlsZWRMb2dnaW5nOiB0cnVlLCAgICAgICAgICAgICAgLy8gRW5hYmxlIGRldGFpbGVkIGxvZ2dpbmdcbiAgfSxcbiAgbW9uaXRvcmluZzoge1xuICAgIGVuYWJsZUNsb3VkV2F0Y2hBbGFybXM6IHRydWUsICAgICAgICAvLyBFbmFibGUgcHJvZHVjdGlvbiBtb25pdG9yaW5nXG4gICAgbG9nUmV0ZW50aW9uRGF5czogMzAsICAgICAgICAgICAgICAgIC8vIEV4dGVuZGVkIGxvZyByZXRlbnRpb25cbiAgfSxcbn07XG5cbi8qKlxuICogR2V0IGVudmlyb25tZW50IGNvbmZpZ3VyYXRpb24gYmFzZWQgb24gZW52aXJvbm1lbnQgdHlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW52aXJvbm1lbnRDb25maWcoZW52VHlwZTogc3RyaW5nKTogQXV0aEluZnJhRW52aXJvbm1lbnRDb25maWcge1xuICBzd2l0Y2ggKGVudlR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ3Byb2QnOlxuICAgIGNhc2UgJ3Byb2R1Y3Rpb24nOlxuICAgICAgcmV0dXJuIFBST0RfQ09ORklHO1xuICAgIGNhc2UgJ2Rldic6XG4gICAgY2FzZSAnZGV2LXRlc3QnOlxuICAgIGNhc2UgJ2RldmVsb3BtZW50JzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIERFVl9URVNUX0NPTkZJRztcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIGVudmlyb25tZW50IGNvbmZpZyB3aXRoIGN1c3RvbSBvdmVycmlkZXNcbiAqIEFsbG93cyBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIGluZGl2aWR1YWwgc2V0dGluZ3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRW52aXJvbm1lbnRDb25maWcoXG4gIGJhc2VDb25maWc6IEF1dGhJbmZyYUVudmlyb25tZW50Q29uZmlnLFxuICBvdmVycmlkZXM6IHtcbiAgICBkYXRhYmFzZT86IFBhcnRpYWw8QXV0aEluZnJhRW52aXJvbm1lbnRDb25maWdbJ2RhdGFiYXNlJ10+O1xuICAgIHJlZGlzPzogUGFydGlhbDxBdXRoSW5mcmFFbnZpcm9ubWVudENvbmZpZ1sncmVkaXMnXT47XG4gICAgZWNzPzogUGFydGlhbDxBdXRoSW5mcmFFbnZpcm9ubWVudENvbmZpZ1snZWNzJ10+O1xuICAgIGVmcz86IFBhcnRpYWw8QXV0aEluZnJhRW52aXJvbm1lbnRDb25maWdbJ2VmcyddPjtcbiAgICBnZW5lcmFsPzogUGFydGlhbDxBdXRoSW5mcmFFbnZpcm9ubWVudENvbmZpZ1snZ2VuZXJhbCddPjtcbiAgICBtb25pdG9yaW5nPzogUGFydGlhbDxBdXRoSW5mcmFFbnZpcm9ubWVudENvbmZpZ1snbW9uaXRvcmluZyddPjtcbiAgfVxuKTogQXV0aEluZnJhRW52aXJvbm1lbnRDb25maWcge1xuICByZXR1cm4ge1xuICAgIGRhdGFiYXNlOiB7IC4uLmJhc2VDb25maWcuZGF0YWJhc2UsIC4uLm92ZXJyaWRlcy5kYXRhYmFzZSB9LFxuICAgIHJlZGlzOiB7IC4uLmJhc2VDb25maWcucmVkaXMsIC4uLm92ZXJyaWRlcy5yZWRpcyB9LFxuICAgIGVjczogeyAuLi5iYXNlQ29uZmlnLmVjcywgLi4ub3ZlcnJpZGVzLmVjcyB9LFxuICAgIGVmczogeyAuLi5iYXNlQ29uZmlnLmVmcywgLi4ub3ZlcnJpZGVzLmVmcyB9LFxuICAgIGdlbmVyYWw6IHsgLi4uYmFzZUNvbmZpZy5nZW5lcmFsLCAuLi5vdmVycmlkZXMuZ2VuZXJhbCB9LFxuICAgIG1vbml0b3Jpbmc6IHsgLi4uYmFzZUNvbmZpZy5tb25pdG9yaW5nLCAuLi5vdmVycmlkZXMubW9uaXRvcmluZyB9LFxuICB9O1xufVxuIl19