"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PROD_CONFIG = exports.DEV_TEST_CONFIG = void 0;
exports.getEnvironmentConfig = getEnvironmentConfig;
exports.mergeEnvironmentConfig = mergeEnvironmentConfig;
/**
 * Environment-specific configuration for auth infrastructure resources
 */
const cdk = __importStar(require("aws-cdk-lib"));
/**
 * Development/Test environment configuration
 * Optimized for cost and development workflow
 */
exports.DEV_TEST_CONFIG = {
    database: {
        instanceClass: 'db.serverless', // Aurora Serverless v2 for cost optimization
        instanceCount: 1, // Single instance for dev/test
        backupRetentionDays: 1, // Minimal backup retention
        deletionProtection: false, // Allow deletion for dev/test
        enablePerformanceInsights: false, // Disable to save costs
        enableMonitoring: false, // Disable enhanced monitoring
    },
    redis: {
        nodeType: 'cache.t4g.micro', // Smallest instance for cost optimization
        numCacheClusters: 1, // Single cluster
        automaticFailoverEnabled: false, // Disable failover for cost savings
    },
    ecs: {
        taskCpu: 512, // Minimal CPU allocation
        taskMemory: 1024, // Minimal memory allocation
        desiredCount: 1, // Single server instance
        minCapacity: 1, // Minimum scaling capacity
        maxCapacity: 3, // Limited scaling for cost control
        workerDesiredCount: 1, // Single worker instance
        workerMinCapacity: 1, // Minimum worker capacity
        workerMaxCapacity: 2, // Limited worker scaling
    },
    efs: {
        throughputMode: 'bursting', // Bursting mode for cost optimization
        removalPolicy: cdk.RemovalPolicy.DESTROY, // Delete EFS in dev/test environments
    },
    general: {
        removalPolicy: cdk.RemovalPolicy.DESTROY, // Allow resource deletion
        enableDetailedLogging: true, // Keep logging for debugging
    },
    monitoring: {
        enableCloudWatchAlarms: false, // Disable alarms to save costs
        logRetentionDays: 7, // Short retention for cost savings
    },
};
/**
 * Production environment configuration
 * Optimized for high availability, security, and production workloads
 */
exports.PROD_CONFIG = {
    database: {
        instanceClass: 'db.t4g.large', // Larger instance for production workloads
        instanceCount: 2, // Multi-AZ deployment for high availability
        backupRetentionDays: 7, // Extended backup retention
        deletionProtection: true, // Protect production data
        enablePerformanceInsights: true, // Enable performance monitoring
        enableMonitoring: true, // Enable enhanced monitoring
    },
    redis: {
        nodeType: 'cache.t4g.small', // Adequate size for production
        numCacheClusters: 2, // Multi-node for high availability
        automaticFailoverEnabled: true, // Enable automatic failover
    },
    ecs: {
        taskCpu: 1024, // Higher CPU for production performance
        taskMemory: 2048, // Higher memory for production performance
        desiredCount: 2, // Multiple instances for availability
        minCapacity: 2, // Minimum production capacity
        maxCapacity: 6, // Higher scaling limits
        workerDesiredCount: 2, // Multiple worker instances
        workerMinCapacity: 1, // Minimum worker capacity
        workerMaxCapacity: 4, // Higher worker scaling limits
    },
    efs: {
        throughputMode: 'bursting', // Bursting mode for most workloads
        removalPolicy: cdk.RemovalPolicy.RETAIN, // Retain EFS in production environments
    },
    general: {
        removalPolicy: cdk.RemovalPolicy.RETAIN, // Protect production resources
        enableDetailedLogging: true, // Enable detailed logging
    },
    monitoring: {
        enableCloudWatchAlarms: true, // Enable production monitoring
        logRetentionDays: 30, // Extended log retention
    },
};
/**
 * Get environment configuration based on environment type
 */
function getEnvironmentConfig(envType) {
    switch (envType.toLowerCase()) {
        case 'prod':
        case 'production':
            return exports.PROD_CONFIG;
        case 'dev':
        case 'dev-test':
        case 'development':
        default:
            return exports.DEV_TEST_CONFIG;
    }
}
/**
 * Merge environment config with custom overrides
 * Allows fine-grained control over individual settings
 */
function mergeEnvironmentConfig(baseConfig, overrides) {
    return {
        database: { ...baseConfig.database, ...overrides.database },
        redis: { ...baseConfig.redis, ...overrides.redis },
        ecs: { ...baseConfig.ecs, ...overrides.ecs },
        efs: { ...baseConfig.efs, ...overrides.efs },
        general: { ...baseConfig.general, ...overrides.general },
        monitoring: { ...baseConfig.monitoring, ...overrides.monitoring },
    };
}
//# sourceMappingURL=data:application/json;base64,